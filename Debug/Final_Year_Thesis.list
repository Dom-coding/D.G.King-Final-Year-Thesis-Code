
Final_Year_Thesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005608  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005718  08005718  00015718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005758  08005758  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08005758  08005758  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005758  08005758  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005758  08005758  00015758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800575c  0800575c  0001575c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08005760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000018  08005778  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08005778  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e222  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fe9  00000000  00000000  0002e263  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f58  00000000  00000000  00030250  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e80  00000000  00000000  000311a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018957  00000000  00000000  00032028  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000be2d  00000000  00000000  0004a97f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000914a9  00000000  00000000  000567ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7c55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000431c  00000000  00000000  000e7cd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08005700 	.word	0x08005700

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08005700 	.word	0x08005700

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	; 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b58:	f1a2 0201 	sub.w	r2, r2, #1
 8000b5c:	d1ed      	bne.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d0a:	2afd      	cmp	r2, #253	; 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	; 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	; 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	; 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <__aeabi_f2uiz>:
 8000f58:	0042      	lsls	r2, r0, #1
 8000f5a:	d20e      	bcs.n	8000f7a <__aeabi_f2uiz+0x22>
 8000f5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f60:	d30b      	bcc.n	8000f7a <__aeabi_f2uiz+0x22>
 8000f62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f6a:	d409      	bmi.n	8000f80 <__aeabi_f2uiz+0x28>
 8000f6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f74:	fa23 f002 	lsr.w	r0, r3, r2
 8000f78:	4770      	bx	lr
 8000f7a:	f04f 0000 	mov.w	r0, #0
 8000f7e:	4770      	bx	lr
 8000f80:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f84:	d101      	bne.n	8000f8a <__aeabi_f2uiz+0x32>
 8000f86:	0242      	lsls	r2, r0, #9
 8000f88:	d102      	bne.n	8000f90 <__aeabi_f2uiz+0x38>
 8000f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8e:	4770      	bx	lr
 8000f90:	f04f 0000 	mov.w	r0, #0
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <Max31855_Read_Temp1>:
uint8_t Error4=0;                                      // Thermocouple Connection acknowledge Flag for unit4
uint32_t sign4=0;									  // Sign bit for unit4
uint8_t DATARX4[4];                                    // Raw Data from MAX6675 for unit4

// ------------------- Functions ----------------
float Max31855_Read_Temp1(void){
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
int Temp1=0;                                           // Temperature Variable
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	607b      	str	r3, [r7, #4]
HAL_GPIO_WritePin(SSPORT1,SSPIN1,GPIO_PIN_RESET);       // Low State for SPI Communication
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2180      	movs	r1, #128	; 0x80
 8000fa6:	4839      	ldr	r0, [pc, #228]	; (800108c <Max31855_Read_Temp1+0xf4>)
 8000fa8:	f002 f998 	bl	80032dc <HAL_GPIO_WritePin>
HAL_SPI_Receive(&hspi1,DATARX1,4,1000);                // DATA Transfer
 8000fac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb0:	2204      	movs	r2, #4
 8000fb2:	4937      	ldr	r1, [pc, #220]	; (8001090 <Max31855_Read_Temp1+0xf8>)
 8000fb4:	4837      	ldr	r0, [pc, #220]	; (8001094 <Max31855_Read_Temp1+0xfc>)
 8000fb6:	f002 ffdd 	bl	8003f74 <HAL_SPI_Receive>
HAL_GPIO_WritePin(SSPORT1,SSPIN1,GPIO_PIN_SET);         // High State for SPI Communication
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2180      	movs	r1, #128	; 0x80
 8000fbe:	4833      	ldr	r0, [pc, #204]	; (800108c <Max31855_Read_Temp1+0xf4>)
 8000fc0:	f002 f98c 	bl	80032dc <HAL_GPIO_WritePin>
Error1=DATARX1[3]&0x07;								  // Error Detection
 8000fc4:	4b32      	ldr	r3, [pc, #200]	; (8001090 <Max31855_Read_Temp1+0xf8>)
 8000fc6:	78db      	ldrb	r3, [r3, #3]
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4b32      	ldr	r3, [pc, #200]	; (8001098 <Max31855_Read_Temp1+0x100>)
 8000fd0:	701a      	strb	r2, [r3, #0]
sign1=(DATARX1[0]&(0x80))>>7;							  // Sign Bit calculation
 8000fd2:	4b2f      	ldr	r3, [pc, #188]	; (8001090 <Max31855_Read_Temp1+0xf8>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	09db      	lsrs	r3, r3, #7
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4b2f      	ldr	r3, [pc, #188]	; (800109c <Max31855_Read_Temp1+0x104>)
 8000fde:	601a      	str	r2, [r3, #0]

if(DATARX1[3] & 0x07)								  // Returns Error Number
 8000fe0:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <Max31855_Read_Temp1+0xf8>)
 8000fe2:	78db      	ldrb	r3, [r3, #3]
 8000fe4:	f003 0307 	and.w	r3, r3, #7
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d009      	beq.n	8001000 <Max31855_Read_Temp1+0x68>
return(-1*(DATARX1[3] & 0x07));
 8000fec:	4b28      	ldr	r3, [pc, #160]	; (8001090 <Max31855_Read_Temp1+0xf8>)
 8000fee:	78db      	ldrb	r3, [r3, #3]
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	425b      	negs	r3, r3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fe0a 	bl	8000c10 <__aeabi_i2f>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	e040      	b.n	8001082 <Max31855_Read_Temp1+0xea>

else if(sign1==1){									  // Negative Temperature
 8001000:	4b26      	ldr	r3, [pc, #152]	; (800109c <Max31855_Read_Temp1+0x104>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d124      	bne.n	8001052 <Max31855_Read_Temp1+0xba>
Temp1 = (DATARX1[0] << 6) | (DATARX1[1] >> 2);
 8001008:	4b21      	ldr	r3, [pc, #132]	; (8001090 <Max31855_Read_Temp1+0xf8>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	019b      	lsls	r3, r3, #6
 800100e:	4a20      	ldr	r2, [pc, #128]	; (8001090 <Max31855_Read_Temp1+0xf8>)
 8001010:	7852      	ldrb	r2, [r2, #1]
 8001012:	0892      	lsrs	r2, r2, #2
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	4313      	orrs	r3, r2
 8001018:	607b      	str	r3, [r7, #4]
Temp1&=0b01111111111111;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001020:	607b      	str	r3, [r7, #4]
Temp1^=0b01111111111111;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f483 53ff 	eor.w	r3, r3, #8160	; 0x1fe0
 8001028:	f083 031f 	eor.w	r3, r3, #31
 800102c:	607b      	str	r3, [r7, #4]
return((double)-Temp1/4);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	425b      	negs	r3, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff f9de 	bl	80003f4 <__aeabi_i2d>
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <Max31855_Read_Temp1+0x108>)
 800103e:	f7ff fb6d 	bl	800071c <__aeabi_ddiv>
 8001042:	4603      	mov	r3, r0
 8001044:	460c      	mov	r4, r1
 8001046:	4618      	mov	r0, r3
 8001048:	4621      	mov	r1, r4
 800104a:	f7ff fcd7 	bl	80009fc <__aeabi_d2f>
 800104e:	4603      	mov	r3, r0
 8001050:	e017      	b.n	8001082 <Max31855_Read_Temp1+0xea>
	}

else												  // Positive Temperature
{
		Temp1 = (DATARX1[0] << 6) | (DATARX1[1] >> 2);
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <Max31855_Read_Temp1+0xf8>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	019b      	lsls	r3, r3, #6
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <Max31855_Read_Temp1+0xf8>)
 800105a:	7852      	ldrb	r2, [r2, #1]
 800105c:	0892      	lsrs	r2, r2, #2
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	4313      	orrs	r3, r2
 8001062:	607b      	str	r3, [r7, #4]
		return((double)Temp1 / 4);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff f9c5 	bl	80003f4 <__aeabi_i2d>
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <Max31855_Read_Temp1+0x108>)
 8001070:	f7ff fb54 	bl	800071c <__aeabi_ddiv>
 8001074:	4603      	mov	r3, r0
 8001076:	460c      	mov	r4, r1
 8001078:	4618      	mov	r0, r3
 800107a:	4621      	mov	r1, r4
 800107c:	f7ff fcbe 	bl	80009fc <__aeabi_d2f>
 8001080:	4603      	mov	r3, r0
}
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	bd90      	pop	{r4, r7, pc}
 800108a:	bf00      	nop
 800108c:	40010800 	.word	0x40010800
 8001090:	20000068 	.word	0x20000068
 8001094:	20000078 	.word	0x20000078
 8001098:	20000034 	.word	0x20000034
 800109c:	20000038 	.word	0x20000038
 80010a0:	40100000 	.word	0x40100000

080010a4 <Max31855_Read_Temp2>:
//---------------------------------------------------------------function 2
float Max31855_Read_Temp2(void){
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
int Temp2=0;                                           // Temperature Variable
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
HAL_GPIO_WritePin(SSPORT2,SSPIN2,GPIO_PIN_RESET);       // Low State for SPI Communication
 80010ae:	2200      	movs	r2, #0
 80010b0:	2180      	movs	r1, #128	; 0x80
 80010b2:	4839      	ldr	r0, [pc, #228]	; (8001198 <Max31855_Read_Temp2+0xf4>)
 80010b4:	f002 f912 	bl	80032dc <HAL_GPIO_WritePin>
HAL_SPI_Receive(&hspi1,DATARX2,4,1000);                // DATA Transfer
 80010b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010bc:	2204      	movs	r2, #4
 80010be:	4937      	ldr	r1, [pc, #220]	; (800119c <Max31855_Read_Temp2+0xf8>)
 80010c0:	4837      	ldr	r0, [pc, #220]	; (80011a0 <Max31855_Read_Temp2+0xfc>)
 80010c2:	f002 ff57 	bl	8003f74 <HAL_SPI_Receive>
HAL_GPIO_WritePin(SSPORT2,SSPIN2,GPIO_PIN_SET);         // High State for SPI Communication
 80010c6:	2201      	movs	r2, #1
 80010c8:	2180      	movs	r1, #128	; 0x80
 80010ca:	4833      	ldr	r0, [pc, #204]	; (8001198 <Max31855_Read_Temp2+0xf4>)
 80010cc:	f002 f906 	bl	80032dc <HAL_GPIO_WritePin>
Error2=DATARX2[3]&0x07;								  // Error Detection
 80010d0:	4b32      	ldr	r3, [pc, #200]	; (800119c <Max31855_Read_Temp2+0xf8>)
 80010d2:	78db      	ldrb	r3, [r3, #3]
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4b32      	ldr	r3, [pc, #200]	; (80011a4 <Max31855_Read_Temp2+0x100>)
 80010dc:	701a      	strb	r2, [r3, #0]
sign2=(DATARX2[0]&(0x80))>>7;							  // Sign Bit calculation
 80010de:	4b2f      	ldr	r3, [pc, #188]	; (800119c <Max31855_Read_Temp2+0xf8>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	09db      	lsrs	r3, r3, #7
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	461a      	mov	r2, r3
 80010e8:	4b2f      	ldr	r3, [pc, #188]	; (80011a8 <Max31855_Read_Temp2+0x104>)
 80010ea:	601a      	str	r2, [r3, #0]

if(DATARX2[3] & 0x07)								  // Returns Error Number
 80010ec:	4b2b      	ldr	r3, [pc, #172]	; (800119c <Max31855_Read_Temp2+0xf8>)
 80010ee:	78db      	ldrb	r3, [r3, #3]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d009      	beq.n	800110c <Max31855_Read_Temp2+0x68>
return(-1*(DATARX2[3] & 0x07));
 80010f8:	4b28      	ldr	r3, [pc, #160]	; (800119c <Max31855_Read_Temp2+0xf8>)
 80010fa:	78db      	ldrb	r3, [r3, #3]
 80010fc:	f003 0307 	and.w	r3, r3, #7
 8001100:	425b      	negs	r3, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fd84 	bl	8000c10 <__aeabi_i2f>
 8001108:	4603      	mov	r3, r0
 800110a:	e040      	b.n	800118e <Max31855_Read_Temp2+0xea>

else if(sign2==1){									  // Negative Temperature
 800110c:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <Max31855_Read_Temp2+0x104>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d124      	bne.n	800115e <Max31855_Read_Temp2+0xba>
Temp2 = (DATARX2[0] << 6) | (DATARX2[1] >> 2);
 8001114:	4b21      	ldr	r3, [pc, #132]	; (800119c <Max31855_Read_Temp2+0xf8>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	019b      	lsls	r3, r3, #6
 800111a:	4a20      	ldr	r2, [pc, #128]	; (800119c <Max31855_Read_Temp2+0xf8>)
 800111c:	7852      	ldrb	r2, [r2, #1]
 800111e:	0892      	lsrs	r2, r2, #2
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	4313      	orrs	r3, r2
 8001124:	607b      	str	r3, [r7, #4]
Temp2&=0b01111111111111;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800112c:	607b      	str	r3, [r7, #4]
Temp2^=0b01111111111111;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f483 53ff 	eor.w	r3, r3, #8160	; 0x1fe0
 8001134:	f083 031f 	eor.w	r3, r3, #31
 8001138:	607b      	str	r3, [r7, #4]
return((double)-Temp2/4);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	425b      	negs	r3, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff f958 	bl	80003f4 <__aeabi_i2d>
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <Max31855_Read_Temp2+0x108>)
 800114a:	f7ff fae7 	bl	800071c <__aeabi_ddiv>
 800114e:	4603      	mov	r3, r0
 8001150:	460c      	mov	r4, r1
 8001152:	4618      	mov	r0, r3
 8001154:	4621      	mov	r1, r4
 8001156:	f7ff fc51 	bl	80009fc <__aeabi_d2f>
 800115a:	4603      	mov	r3, r0
 800115c:	e017      	b.n	800118e <Max31855_Read_Temp2+0xea>
	}

else												  // Positive Temperature
{
		Temp2 = (DATARX2[0] << 6) | (DATARX2[1] >> 2);
 800115e:	4b0f      	ldr	r3, [pc, #60]	; (800119c <Max31855_Read_Temp2+0xf8>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	019b      	lsls	r3, r3, #6
 8001164:	4a0d      	ldr	r2, [pc, #52]	; (800119c <Max31855_Read_Temp2+0xf8>)
 8001166:	7852      	ldrb	r2, [r2, #1]
 8001168:	0892      	lsrs	r2, r2, #2
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	4313      	orrs	r3, r2
 800116e:	607b      	str	r3, [r7, #4]
		return((double)Temp2 / 4);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff f93f 	bl	80003f4 <__aeabi_i2d>
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <Max31855_Read_Temp2+0x108>)
 800117c:	f7ff face 	bl	800071c <__aeabi_ddiv>
 8001180:	4603      	mov	r3, r0
 8001182:	460c      	mov	r4, r1
 8001184:	4618      	mov	r0, r3
 8001186:	4621      	mov	r1, r4
 8001188:	f7ff fc38 	bl	80009fc <__aeabi_d2f>
 800118c:	4603      	mov	r3, r0
}
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	bd90      	pop	{r4, r7, pc}
 8001196:	bf00      	nop
 8001198:	40010c00 	.word	0x40010c00
 800119c:	20000070 	.word	0x20000070
 80011a0:	20000078 	.word	0x20000078
 80011a4:	2000003c 	.word	0x2000003c
 80011a8:	20000040 	.word	0x20000040
 80011ac:	40100000 	.word	0x40100000

080011b0 <Max31855_Read_Temp3>:

//-------------------------------------------------------------function 3
float Max31855_Read_Temp3(void){
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
int Temp3=0;                                           // Temperature Variable
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
HAL_GPIO_WritePin(SSPORT3,SSPIN3,GPIO_PIN_RESET);       // Low State for SPI Communication
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c0:	4839      	ldr	r0, [pc, #228]	; (80012a8 <Max31855_Read_Temp3+0xf8>)
 80011c2:	f002 f88b 	bl	80032dc <HAL_GPIO_WritePin>
HAL_SPI_Receive(&hspi1,DATARX3,4,1000);                // DATA Transfer
 80011c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ca:	2204      	movs	r2, #4
 80011cc:	4937      	ldr	r1, [pc, #220]	; (80012ac <Max31855_Read_Temp3+0xfc>)
 80011ce:	4838      	ldr	r0, [pc, #224]	; (80012b0 <Max31855_Read_Temp3+0x100>)
 80011d0:	f002 fed0 	bl	8003f74 <HAL_SPI_Receive>
HAL_GPIO_WritePin(SSPORT3,SSPIN3,GPIO_PIN_SET);         // High State for SPI Communication
 80011d4:	2201      	movs	r2, #1
 80011d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011da:	4833      	ldr	r0, [pc, #204]	; (80012a8 <Max31855_Read_Temp3+0xf8>)
 80011dc:	f002 f87e 	bl	80032dc <HAL_GPIO_WritePin>
Error3=DATARX3[3]&0x07;								  // Error Detection
 80011e0:	4b32      	ldr	r3, [pc, #200]	; (80012ac <Max31855_Read_Temp3+0xfc>)
 80011e2:	78db      	ldrb	r3, [r3, #3]
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4b32      	ldr	r3, [pc, #200]	; (80012b4 <Max31855_Read_Temp3+0x104>)
 80011ec:	701a      	strb	r2, [r3, #0]
sign3=(DATARX3[0]&(0x80))>>7;							  // Sign Bit calculation
 80011ee:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <Max31855_Read_Temp3+0xfc>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	09db      	lsrs	r3, r3, #7
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b2f      	ldr	r3, [pc, #188]	; (80012b8 <Max31855_Read_Temp3+0x108>)
 80011fa:	601a      	str	r2, [r3, #0]

if(DATARX3[3] & 0x07)								  // Returns Error Number
 80011fc:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <Max31855_Read_Temp3+0xfc>)
 80011fe:	78db      	ldrb	r3, [r3, #3]
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	2b00      	cmp	r3, #0
 8001206:	d009      	beq.n	800121c <Max31855_Read_Temp3+0x6c>
return(-1*(DATARX3[3] & 0x07));
 8001208:	4b28      	ldr	r3, [pc, #160]	; (80012ac <Max31855_Read_Temp3+0xfc>)
 800120a:	78db      	ldrb	r3, [r3, #3]
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	425b      	negs	r3, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fcfc 	bl	8000c10 <__aeabi_i2f>
 8001218:	4603      	mov	r3, r0
 800121a:	e040      	b.n	800129e <Max31855_Read_Temp3+0xee>

else if(sign3==1){									  // Negative Temperature
 800121c:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <Max31855_Read_Temp3+0x108>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d124      	bne.n	800126e <Max31855_Read_Temp3+0xbe>
Temp3 = (DATARX3[0] << 6) | (DATARX3[1] >> 2);
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <Max31855_Read_Temp3+0xfc>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	019b      	lsls	r3, r3, #6
 800122a:	4a20      	ldr	r2, [pc, #128]	; (80012ac <Max31855_Read_Temp3+0xfc>)
 800122c:	7852      	ldrb	r2, [r2, #1]
 800122e:	0892      	lsrs	r2, r2, #2
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	4313      	orrs	r3, r2
 8001234:	607b      	str	r3, [r7, #4]
Temp3&=0b01111111111111;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800123c:	607b      	str	r3, [r7, #4]
Temp3^=0b01111111111111;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f483 53ff 	eor.w	r3, r3, #8160	; 0x1fe0
 8001244:	f083 031f 	eor.w	r3, r3, #31
 8001248:	607b      	str	r3, [r7, #4]
return((double)-Temp3/4);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	425b      	negs	r3, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f8d0 	bl	80003f4 <__aeabi_i2d>
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <Max31855_Read_Temp3+0x10c>)
 800125a:	f7ff fa5f 	bl	800071c <__aeabi_ddiv>
 800125e:	4603      	mov	r3, r0
 8001260:	460c      	mov	r4, r1
 8001262:	4618      	mov	r0, r3
 8001264:	4621      	mov	r1, r4
 8001266:	f7ff fbc9 	bl	80009fc <__aeabi_d2f>
 800126a:	4603      	mov	r3, r0
 800126c:	e017      	b.n	800129e <Max31855_Read_Temp3+0xee>
	}

else												  // Positive Temperature
{
		Temp3 = (DATARX3[0] << 6) | (DATARX3[1] >> 2);
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <Max31855_Read_Temp3+0xfc>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	019b      	lsls	r3, r3, #6
 8001274:	4a0d      	ldr	r2, [pc, #52]	; (80012ac <Max31855_Read_Temp3+0xfc>)
 8001276:	7852      	ldrb	r2, [r2, #1]
 8001278:	0892      	lsrs	r2, r2, #2
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	4313      	orrs	r3, r2
 800127e:	607b      	str	r3, [r7, #4]
		return((double)Temp3 / 4);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff f8b7 	bl	80003f4 <__aeabi_i2d>
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <Max31855_Read_Temp3+0x10c>)
 800128c:	f7ff fa46 	bl	800071c <__aeabi_ddiv>
 8001290:	4603      	mov	r3, r0
 8001292:	460c      	mov	r4, r1
 8001294:	4618      	mov	r0, r3
 8001296:	4621      	mov	r1, r4
 8001298:	f7ff fbb0 	bl	80009fc <__aeabi_d2f>
 800129c:	4603      	mov	r3, r0
}
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd90      	pop	{r4, r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40010c00 	.word	0x40010c00
 80012ac:	2000006c 	.word	0x2000006c
 80012b0:	20000078 	.word	0x20000078
 80012b4:	20000044 	.word	0x20000044
 80012b8:	20000048 	.word	0x20000048
 80012bc:	40100000 	.word	0x40100000

080012c0 <Max31855_Read_Temp4>:

//---------------------------------------------------------------function 4
float Max31855_Read_Temp4(void){
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
int Temp4=0;                                           // Temperature Variable
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
HAL_GPIO_WritePin(SSPORT4,SSPIN4,GPIO_PIN_RESET);       // Low State for SPI Communication
 80012ca:	2200      	movs	r2, #0
 80012cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d0:	4839      	ldr	r0, [pc, #228]	; (80013b8 <Max31855_Read_Temp4+0xf8>)
 80012d2:	f002 f803 	bl	80032dc <HAL_GPIO_WritePin>
HAL_SPI_Receive(&hspi1,DATARX4,4,1000);                // DATA Transfer
 80012d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012da:	2204      	movs	r2, #4
 80012dc:	4937      	ldr	r1, [pc, #220]	; (80013bc <Max31855_Read_Temp4+0xfc>)
 80012de:	4838      	ldr	r0, [pc, #224]	; (80013c0 <Max31855_Read_Temp4+0x100>)
 80012e0:	f002 fe48 	bl	8003f74 <HAL_SPI_Receive>
HAL_GPIO_WritePin(SSPORT4,SSPIN4,GPIO_PIN_SET);         // High State for SPI Communication
 80012e4:	2201      	movs	r2, #1
 80012e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ea:	4833      	ldr	r0, [pc, #204]	; (80013b8 <Max31855_Read_Temp4+0xf8>)
 80012ec:	f001 fff6 	bl	80032dc <HAL_GPIO_WritePin>
Error4=DATARX4[3]&0x07;								  // Error Detection
 80012f0:	4b32      	ldr	r3, [pc, #200]	; (80013bc <Max31855_Read_Temp4+0xfc>)
 80012f2:	78db      	ldrb	r3, [r3, #3]
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4b32      	ldr	r3, [pc, #200]	; (80013c4 <Max31855_Read_Temp4+0x104>)
 80012fc:	701a      	strb	r2, [r3, #0]
sign4=(DATARX4[0]&(0x80))>>7;							  // Sign Bit calculation
 80012fe:	4b2f      	ldr	r3, [pc, #188]	; (80013bc <Max31855_Read_Temp4+0xfc>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	09db      	lsrs	r3, r3, #7
 8001304:	b2db      	uxtb	r3, r3
 8001306:	461a      	mov	r2, r3
 8001308:	4b2f      	ldr	r3, [pc, #188]	; (80013c8 <Max31855_Read_Temp4+0x108>)
 800130a:	601a      	str	r2, [r3, #0]

if(DATARX4[3] & 0x07)								  // Returns Error Number
 800130c:	4b2b      	ldr	r3, [pc, #172]	; (80013bc <Max31855_Read_Temp4+0xfc>)
 800130e:	78db      	ldrb	r3, [r3, #3]
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	2b00      	cmp	r3, #0
 8001316:	d009      	beq.n	800132c <Max31855_Read_Temp4+0x6c>
return(-1*(DATARX4[3] & 0x07));
 8001318:	4b28      	ldr	r3, [pc, #160]	; (80013bc <Max31855_Read_Temp4+0xfc>)
 800131a:	78db      	ldrb	r3, [r3, #3]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	425b      	negs	r3, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fc74 	bl	8000c10 <__aeabi_i2f>
 8001328:	4603      	mov	r3, r0
 800132a:	e040      	b.n	80013ae <Max31855_Read_Temp4+0xee>

else if(sign4==1){									  // Negative Temperature
 800132c:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <Max31855_Read_Temp4+0x108>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d124      	bne.n	800137e <Max31855_Read_Temp4+0xbe>
Temp4 = (DATARX4[0] << 6) | (DATARX4[1] >> 2);
 8001334:	4b21      	ldr	r3, [pc, #132]	; (80013bc <Max31855_Read_Temp4+0xfc>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	019b      	lsls	r3, r3, #6
 800133a:	4a20      	ldr	r2, [pc, #128]	; (80013bc <Max31855_Read_Temp4+0xfc>)
 800133c:	7852      	ldrb	r2, [r2, #1]
 800133e:	0892      	lsrs	r2, r2, #2
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	4313      	orrs	r3, r2
 8001344:	607b      	str	r3, [r7, #4]
Temp4&=0b01111111111111;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800134c:	607b      	str	r3, [r7, #4]
Temp4^=0b01111111111111;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f483 53ff 	eor.w	r3, r3, #8160	; 0x1fe0
 8001354:	f083 031f 	eor.w	r3, r3, #31
 8001358:	607b      	str	r3, [r7, #4]
return((double)-Temp4/4);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	425b      	negs	r3, r3
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f848 	bl	80003f4 <__aeabi_i2d>
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	4b18      	ldr	r3, [pc, #96]	; (80013cc <Max31855_Read_Temp4+0x10c>)
 800136a:	f7ff f9d7 	bl	800071c <__aeabi_ddiv>
 800136e:	4603      	mov	r3, r0
 8001370:	460c      	mov	r4, r1
 8001372:	4618      	mov	r0, r3
 8001374:	4621      	mov	r1, r4
 8001376:	f7ff fb41 	bl	80009fc <__aeabi_d2f>
 800137a:	4603      	mov	r3, r0
 800137c:	e017      	b.n	80013ae <Max31855_Read_Temp4+0xee>
	}

else												  // Positive Temperature
{
		Temp4 = (DATARX4[0] << 6) | (DATARX4[1] >> 2);
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <Max31855_Read_Temp4+0xfc>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	019b      	lsls	r3, r3, #6
 8001384:	4a0d      	ldr	r2, [pc, #52]	; (80013bc <Max31855_Read_Temp4+0xfc>)
 8001386:	7852      	ldrb	r2, [r2, #1]
 8001388:	0892      	lsrs	r2, r2, #2
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	4313      	orrs	r3, r2
 800138e:	607b      	str	r3, [r7, #4]
		return((double)Temp4 / 4);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff f82f 	bl	80003f4 <__aeabi_i2d>
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <Max31855_Read_Temp4+0x10c>)
 800139c:	f7ff f9be 	bl	800071c <__aeabi_ddiv>
 80013a0:	4603      	mov	r3, r0
 80013a2:	460c      	mov	r4, r1
 80013a4:	4618      	mov	r0, r3
 80013a6:	4621      	mov	r1, r4
 80013a8:	f7ff fb28 	bl	80009fc <__aeabi_d2f>
 80013ac:	4603      	mov	r3, r0
}
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd90      	pop	{r4, r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40010c00 	.word	0x40010c00
 80013bc:	20000074 	.word	0x20000074
 80013c0:	20000078 	.word	0x20000078
 80013c4:	2000004c 	.word	0x2000004c
 80013c8:	20000050 	.word	0x20000050
 80013cc:	40100000 	.word	0x40100000

080013d0 <SevenSegment_Update>:
        0x07,  // 7
        0x7f,  // 8
        0x67   // 9
};

void SevenSegment_Update(uint8_t number){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, ((number>>0)&0x01));
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	461a      	mov	r2, r3
 80013e4:	2101      	movs	r1, #1
 80013e6:	4824      	ldr	r0, [pc, #144]	; (8001478 <SevenSegment_Update+0xa8>)
 80013e8:	f001 ff78 	bl	80032dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, ((number>>1)&0x01));
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	085b      	lsrs	r3, r3, #1
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	461a      	mov	r2, r3
 80013fa:	2102      	movs	r1, #2
 80013fc:	481e      	ldr	r0, [pc, #120]	; (8001478 <SevenSegment_Update+0xa8>)
 80013fe:	f001 ff6d 	bl	80032dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, ((number>>2)&0x01));
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	b2db      	uxtb	r3, r3
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	b2db      	uxtb	r3, r3
 800140e:	461a      	mov	r2, r3
 8001410:	2104      	movs	r1, #4
 8001412:	4819      	ldr	r0, [pc, #100]	; (8001478 <SevenSegment_Update+0xa8>)
 8001414:	f001 ff62 	bl	80032dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, ((number>>3)&0x01));
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	08db      	lsrs	r3, r3, #3
 800141c:	b2db      	uxtb	r3, r3
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	b2db      	uxtb	r3, r3
 8001424:	461a      	mov	r2, r3
 8001426:	2108      	movs	r1, #8
 8001428:	4813      	ldr	r0, [pc, #76]	; (8001478 <SevenSegment_Update+0xa8>)
 800142a:	f001 ff57 	bl	80032dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, ((number>>4)&0x01));
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	091b      	lsrs	r3, r3, #4
 8001432:	b2db      	uxtb	r3, r3
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	b2db      	uxtb	r3, r3
 800143a:	461a      	mov	r2, r3
 800143c:	2110      	movs	r1, #16
 800143e:	480e      	ldr	r0, [pc, #56]	; (8001478 <SevenSegment_Update+0xa8>)
 8001440:	f001 ff4c 	bl	80032dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, ((number>>5)&0x01));
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	095b      	lsrs	r3, r3, #5
 8001448:	b2db      	uxtb	r3, r3
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	b2db      	uxtb	r3, r3
 8001450:	461a      	mov	r2, r3
 8001452:	2120      	movs	r1, #32
 8001454:	4808      	ldr	r0, [pc, #32]	; (8001478 <SevenSegment_Update+0xa8>)
 8001456:	f001 ff41 	bl	80032dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, ((number>>6)&0x01));
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	099b      	lsrs	r3, r3, #6
 800145e:	b2db      	uxtb	r3, r3
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	b2db      	uxtb	r3, r3
 8001466:	461a      	mov	r2, r3
 8001468:	2140      	movs	r1, #64	; 0x40
 800146a:	4803      	ldr	r0, [pc, #12]	; (8001478 <SevenSegment_Update+0xa8>)
 800146c:	f001 ff36 	bl	80032dc <HAL_GPIO_WritePin>
};
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40010800 	.word	0x40010800

0800147c <ADC_select_CH10>:

void ADC_select_CH10(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
	  sConfig.Channel = ADC_CHANNEL_10;
 800148c:	230a      	movs	r3, #10
 800148e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001490:	2301      	movs	r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	4619      	mov	r1, r3
 800149c:	4805      	ldr	r0, [pc, #20]	; (80014b4 <ADC_select_CH10+0x38>)
 800149e:	f001 faab 	bl	80029f8 <HAL_ADC_ConfigChannel>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <ADC_select_CH10+0x30>
	  {
	    Error_Handler();
 80014a8:	f000 fd64 	bl	8001f74 <Error_Handler>
	  }
}
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000120 	.word	0x20000120

080014b8 <ADC_select_CH11>:

void ADC_select_CH11(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
	  sConfig.Channel = ADC_CHANNEL_11;
 80014c8:	230b      	movs	r3, #11
 80014ca:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014cc:	2302      	movs	r3, #2
 80014ce:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	4619      	mov	r1, r3
 80014d8:	4805      	ldr	r0, [pc, #20]	; (80014f0 <ADC_select_CH11+0x38>)
 80014da:	f001 fa8d 	bl	80029f8 <HAL_ADC_ConfigChannel>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <ADC_select_CH11+0x30>
	  {
	    Error_Handler();
 80014e4:	f000 fd46 	bl	8001f74 <Error_Handler>
	  }
}
 80014e8:	bf00      	nop
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000120 	.word	0x20000120

080014f4 <ADC_select_CH12>:

void ADC_select_CH12(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
	  sConfig.Channel = ADC_CHANNEL_12;
 8001504:	230c      	movs	r3, #12
 8001506:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001508:	2303      	movs	r3, #3
 800150a:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	4619      	mov	r1, r3
 8001514:	4805      	ldr	r0, [pc, #20]	; (800152c <ADC_select_CH12+0x38>)
 8001516:	f001 fa6f 	bl	80029f8 <HAL_ADC_ConfigChannel>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <ADC_select_CH12+0x30>
	  {
	    Error_Handler();
 8001520:	f000 fd28 	bl	8001f74 <Error_Handler>
	  }


}
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000120 	.word	0x20000120

08001530 <ADC_select_CH13>:

void ADC_select_CH13(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
	  sConfig.Channel = ADC_CHANNEL_13;
 8001540:	230d      	movs	r3, #13
 8001542:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001544:	2304      	movs	r3, #4
 8001546:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	; (8001568 <ADC_select_CH13+0x38>)
 8001552:	f001 fa51 	bl	80029f8 <HAL_ADC_ConfigChannel>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <ADC_select_CH13+0x30>
	  {
	    Error_Handler();
 800155c:	f000 fd0a 	bl	8001f74 <Error_Handler>
	  }
}
 8001560:	bf00      	nop
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000120 	.word	0x20000120

0800156c <ADC_select_CH0>:

void ADC_select_CH0(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
	  sConfig.Channel = ADC_CHANNEL_0;
 800157c:	2300      	movs	r3, #0
 800157e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001580:	2305      	movs	r3, #5
 8001582:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	4619      	mov	r1, r3
 800158c:	4805      	ldr	r0, [pc, #20]	; (80015a4 <ADC_select_CH0+0x38>)
 800158e:	f001 fa33 	bl	80029f8 <HAL_ADC_ConfigChannel>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <ADC_select_CH0+0x30>
	  {
	    Error_Handler();
 8001598:	f000 fcec 	bl	8001f74 <Error_Handler>
	  }
}
 800159c:	bf00      	nop
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000120 	.word	0x20000120

080015a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ae:	f000 fedb 	bl	8002368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b2:	f000 fa87 	bl	8001ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b6:	f000 fc41 	bl	8001e3c <MX_GPIO_Init>
  MX_ADC1_Init();
 80015ba:	f000 fad9 	bl	8001b70 <MX_ADC1_Init>
  MX_SPI1_Init();
 80015be:	f000 fb4f 	bl	8001c60 <MX_SPI1_Init>
  MX_TIM3_Init();
 80015c2:	f000 fb83 	bl	8001ccc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80015c6:	f000 fc0f 	bl	8001de8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);               //Initialize stm32 timer 3
 80015ca:	48b7      	ldr	r0, [pc, #732]	; (80018a8 <main+0x300>)
 80015cc:	f003 f9d4 	bl	8004978 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);  //PB0 Start pwm temp motor 100% duty cycle
 80015d0:	2100      	movs	r1, #0
 80015d2:	48b5      	ldr	r0, [pc, #724]	; (80018a8 <main+0x300>)
 80015d4:	f003 fa72 	bl	8004abc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);  //PB0 Start pwm pitch motor 100% duty cycle
 80015d8:	2104      	movs	r1, #4
 80015da:	48b3      	ldr	r0, [pc, #716]	; (80018a8 <main+0x300>)
 80015dc:	f003 fa6e 	bl	8004abc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);  //PB0 Start pwm azimuth motor 100% duty cycle
 80015e0:	2108      	movs	r1, #8
 80015e2:	48b1      	ldr	r0, [pc, #708]	; (80018a8 <main+0x300>)
 80015e4:	f003 fa6a 	bl	8004abc <HAL_TIM_PWM_Start>


	//------------------------------------------test temp motor--------------------------------------
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,75);
 80015e8:	4baf      	ldr	r3, [pc, #700]	; (80018a8 <main+0x300>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	224b      	movs	r2, #75	; 0x4b
 80015ee:	635a      	str	r2, [r3, #52]	; 0x34
	 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);   // Start temp motor CCW rotation
 80015f0:	2200      	movs	r2, #0
 80015f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f6:	48ad      	ldr	r0, [pc, #692]	; (80018ac <main+0x304>)
 80015f8:	f001 fe70 	bl	80032dc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,GPIO_PIN_SET); // Start temp motor CCW rotation
 80015fc:	2201      	movs	r2, #1
 80015fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001602:	48ab      	ldr	r0, [pc, #684]	; (80018b0 <main+0x308>)
 8001604:	f001 fe6a 	bl	80032dc <HAL_GPIO_WritePin>
	 HAL_Delay(20000);
 8001608:	f644 6020 	movw	r0, #20000	; 0x4e20
 800160c:	f000 ff0e 	bl	800242c <HAL_Delay>
	 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,GPIO_PIN_RESET);   // Stop temp motor CCW rotation
 8001610:	2200      	movs	r2, #0
 8001612:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001616:	48a6      	ldr	r0, [pc, #664]	; (80018b0 <main+0x308>)
 8001618:	f001 fe60 	bl	80032dc <HAL_GPIO_WritePin>
	 HAL_Delay(5000);
 800161c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001620:	f000 ff04 	bl	800242c <HAL_Delay>
	 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);   // Start temp motor CCW rotation
 8001624:	2200      	movs	r2, #0
 8001626:	f44f 7180 	mov.w	r1, #256	; 0x100
 800162a:	48a0      	ldr	r0, [pc, #640]	; (80018ac <main+0x304>)
 800162c:	f001 fe56 	bl	80032dc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,GPIO_PIN_SET); // Start temp motor CCW rotation
 8001630:	2201      	movs	r2, #1
 8001632:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001636:	489e      	ldr	r0, [pc, #632]	; (80018b0 <main+0x308>)
 8001638:	f001 fe50 	bl	80032dc <HAL_GPIO_WritePin>
	 HAL_Delay(20000);
 800163c:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001640:	f000 fef4 	bl	800242c <HAL_Delay>
	 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,GPIO_PIN_RESET);   // Stop temp motor CCW rotation
 8001644:	2200      	movs	r2, #0
 8001646:	f44f 7100 	mov.w	r1, #512	; 0x200
 800164a:	4899      	ldr	r0, [pc, #612]	; (80018b0 <main+0x308>)
 800164c:	f001 fe46 	bl	80032dc <HAL_GPIO_WritePin>
	 HAL_Delay(5000);
 8001650:	f241 3088 	movw	r0, #5000	; 0x1388
 8001654:	f000 feea 	bl	800242c <HAL_Delay>
	 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);   // Start temp motor CW rotation
 8001658:	2201      	movs	r2, #1
 800165a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800165e:	4893      	ldr	r0, [pc, #588]	; (80018ac <main+0x304>)
 8001660:	f001 fe3c 	bl	80032dc <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,GPIO_PIN_RESET); // Start temp motor CW rotation
 8001664:	2200      	movs	r2, #0
 8001666:	f44f 7100 	mov.w	r1, #512	; 0x200
 800166a:	4891      	ldr	r0, [pc, #580]	; (80018b0 <main+0x308>)
 800166c:	f001 fe36 	bl	80032dc <HAL_GPIO_WritePin>
	 HAL_Delay(40000);
 8001670:	f649 4040 	movw	r0, #40000	; 0x9c40
 8001674:	f000 feda 	bl	800242c <HAL_Delay>
	 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET); // Stop temp motor CW rotation
 8001678:	2200      	movs	r2, #0
 800167a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800167e:	488b      	ldr	r0, [pc, #556]	; (80018ac <main+0x304>)
 8001680:	f001 fe2c 	bl	80032dc <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  { //-----------------------------------------------------------------------------------------read temperatures from thermocouple-------------
	  temp1=Max31855_Read_Temp1(); 			// Gets Temperature 1 from MAX31855
 8001684:	f7ff fc88 	bl	8000f98 <Max31855_Read_Temp1>
 8001688:	4602      	mov	r2, r0
 800168a:	4b8a      	ldr	r3, [pc, #552]	; (80018b4 <main+0x30c>)
 800168c:	601a      	str	r2, [r3, #0]
	  temp2=Max31855_Read_Temp2(); 			// Gets Temperature 2 from MAX31855
 800168e:	f7ff fd09 	bl	80010a4 <Max31855_Read_Temp2>
 8001692:	4602      	mov	r2, r0
 8001694:	4b88      	ldr	r3, [pc, #544]	; (80018b8 <main+0x310>)
 8001696:	601a      	str	r2, [r3, #0]
	  temp3=Max31855_Read_Temp3(); 			// Gets Temperature 3 from MAX31855
 8001698:	f7ff fd8a 	bl	80011b0 <Max31855_Read_Temp3>
 800169c:	4602      	mov	r2, r0
 800169e:	4b87      	ldr	r3, [pc, #540]	; (80018bc <main+0x314>)
 80016a0:	601a      	str	r2, [r3, #0]
	  temp4=Max31855_Read_Temp4(); 			// Gets Temperature 4 from MAX31855
 80016a2:	f7ff fe0d 	bl	80012c0 <Max31855_Read_Temp4>
 80016a6:	4602      	mov	r2, r0
 80016a8:	4b85      	ldr	r3, [pc, #532]	; (80018c0 <main+0x318>)
 80016aa:	601a      	str	r2, [r3, #0]
	  avetemp = (temp1+temp2+temp3+temp4)/4; //determine average temperature from 4 MAX31855 units to be displayed on 7-segment display
 80016ac:	4b81      	ldr	r3, [pc, #516]	; (80018b4 <main+0x30c>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b81      	ldr	r3, [pc, #516]	; (80018b8 <main+0x310>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	4610      	mov	r0, r2
 80016b8:	f7ff f9f6 	bl	8000aa8 <__addsf3>
 80016bc:	4603      	mov	r3, r0
 80016be:	461a      	mov	r2, r3
 80016c0:	4b7e      	ldr	r3, [pc, #504]	; (80018bc <main+0x314>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4619      	mov	r1, r3
 80016c6:	4610      	mov	r0, r2
 80016c8:	f7ff f9ee 	bl	8000aa8 <__addsf3>
 80016cc:	4603      	mov	r3, r0
 80016ce:	461a      	mov	r2, r3
 80016d0:	4b7b      	ldr	r3, [pc, #492]	; (80018c0 <main+0x318>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	4610      	mov	r0, r2
 80016d8:	f7ff f9e6 	bl	8000aa8 <__addsf3>
 80016dc:	4603      	mov	r3, r0
 80016de:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fb9c 	bl	8000e20 <__aeabi_fdiv>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fc34 	bl	8000f58 <__aeabi_f2uiz>
 80016f0:	4602      	mov	r2, r0
 80016f2:	4b74      	ldr	r3, [pc, #464]	; (80018c4 <main+0x31c>)
 80016f4:	601a      	str	r2, [r3, #0]
	  //--------------------------------------------------------------------------------------end read temperatures------------------------------

	  //---------------------------------------------------------------------------Display Temp on LED------------------------------
	  c1 = (avetemp/100)%10; //first digit
 80016f6:	4b73      	ldr	r3, [pc, #460]	; (80018c4 <main+0x31c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a73      	ldr	r2, [pc, #460]	; (80018c8 <main+0x320>)
 80016fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001700:	0959      	lsrs	r1, r3, #5
 8001702:	4b72      	ldr	r3, [pc, #456]	; (80018cc <main+0x324>)
 8001704:	fba3 2301 	umull	r2, r3, r3, r1
 8001708:	08da      	lsrs	r2, r3, #3
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	1aca      	subs	r2, r1, r3
 8001714:	4b6e      	ldr	r3, [pc, #440]	; (80018d0 <main+0x328>)
 8001716:	601a      	str	r2, [r3, #0]
	  c2 = (avetemp/10)%10; //second digit
 8001718:	4b6a      	ldr	r3, [pc, #424]	; (80018c4 <main+0x31c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a6b      	ldr	r2, [pc, #428]	; (80018cc <main+0x324>)
 800171e:	fba2 2303 	umull	r2, r3, r2, r3
 8001722:	08d9      	lsrs	r1, r3, #3
 8001724:	4b69      	ldr	r3, [pc, #420]	; (80018cc <main+0x324>)
 8001726:	fba3 2301 	umull	r2, r3, r3, r1
 800172a:	08da      	lsrs	r2, r3, #3
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	1aca      	subs	r2, r1, r3
 8001736:	4b67      	ldr	r3, [pc, #412]	; (80018d4 <main+0x32c>)
 8001738:	601a      	str	r2, [r3, #0]
	  c3 = avetemp%10; //third digit
 800173a:	4b62      	ldr	r3, [pc, #392]	; (80018c4 <main+0x31c>)
 800173c:	6819      	ldr	r1, [r3, #0]
 800173e:	4b63      	ldr	r3, [pc, #396]	; (80018cc <main+0x324>)
 8001740:	fba3 2301 	umull	r2, r3, r3, r1
 8001744:	08da      	lsrs	r2, r3, #3
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	1aca      	subs	r2, r1, r3
 8001750:	4b61      	ldr	r3, [pc, #388]	; (80018d8 <main+0x330>)
 8001752:	601a      	str	r2, [r3, #0]

	  	  SevenSegment_Update(segmentNumber[c1]); //note common cathode 7-segment display therefore must pull D1, D2 and D3 from low to high to write to the display
 8001754:	4b5e      	ldr	r3, [pc, #376]	; (80018d0 <main+0x328>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a60      	ldr	r2, [pc, #384]	; (80018dc <main+0x334>)
 800175a:	5cd3      	ldrb	r3, [r2, r3]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fe37 	bl	80013d0 <SevenSegment_Update>
	  	  D1_LOW();
 8001762:	2200      	movs	r2, #0
 8001764:	2110      	movs	r1, #16
 8001766:	4852      	ldr	r0, [pc, #328]	; (80018b0 <main+0x308>)
 8001768:	f001 fdb8 	bl	80032dc <HAL_GPIO_WritePin>
	  	  HAL_Delay(7);
 800176c:	2007      	movs	r0, #7
 800176e:	f000 fe5d 	bl	800242c <HAL_Delay>
	  	  D1_HIGH();
 8001772:	2201      	movs	r2, #1
 8001774:	2110      	movs	r1, #16
 8001776:	484e      	ldr	r0, [pc, #312]	; (80018b0 <main+0x308>)
 8001778:	f001 fdb0 	bl	80032dc <HAL_GPIO_WritePin>

	  	  SevenSegment_Update(segmentNumber[c2]);
 800177c:	4b55      	ldr	r3, [pc, #340]	; (80018d4 <main+0x32c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a56      	ldr	r2, [pc, #344]	; (80018dc <main+0x334>)
 8001782:	5cd3      	ldrb	r3, [r2, r3]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fe23 	bl	80013d0 <SevenSegment_Update>
	  	  D2_LOW();
 800178a:	2200      	movs	r2, #0
 800178c:	2120      	movs	r1, #32
 800178e:	4848      	ldr	r0, [pc, #288]	; (80018b0 <main+0x308>)
 8001790:	f001 fda4 	bl	80032dc <HAL_GPIO_WritePin>
	  	  HAL_Delay(7);
 8001794:	2007      	movs	r0, #7
 8001796:	f000 fe49 	bl	800242c <HAL_Delay>
	  	  D2_HIGH();
 800179a:	2201      	movs	r2, #1
 800179c:	2120      	movs	r1, #32
 800179e:	4844      	ldr	r0, [pc, #272]	; (80018b0 <main+0x308>)
 80017a0:	f001 fd9c 	bl	80032dc <HAL_GPIO_WritePin>

	  	  SevenSegment_Update(segmentNumber[c3]);
 80017a4:	4b4c      	ldr	r3, [pc, #304]	; (80018d8 <main+0x330>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a4c      	ldr	r2, [pc, #304]	; (80018dc <main+0x334>)
 80017aa:	5cd3      	ldrb	r3, [r2, r3]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fe0f 	bl	80013d0 <SevenSegment_Update>
	  	  D3_LOW();
 80017b2:	2200      	movs	r2, #0
 80017b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017b8:	4849      	ldr	r0, [pc, #292]	; (80018e0 <main+0x338>)
 80017ba:	f001 fd8f 	bl	80032dc <HAL_GPIO_WritePin>
	  	  HAL_Delay(7);
 80017be:	2007      	movs	r0, #7
 80017c0:	f000 fe34 	bl	800242c <HAL_Delay>
	  	  D3_HIGH();
 80017c4:	2201      	movs	r2, #1
 80017c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ca:	4845      	ldr	r0, [pc, #276]	; (80018e0 <main+0x338>)
 80017cc:	f001 fd86 	bl	80032dc <HAL_GPIO_WritePin>
	  //--------------------------------------------------------------------------End of LED display-------------------------------

	  //-----------------------------------------------------------------------------read user input from potentiometer------
	   ADC_select_CH10();
 80017d0:	f7ff fe54 	bl	800147c <ADC_select_CH10>
	   HAL_ADC_Start(&hadc1);
 80017d4:	4843      	ldr	r0, [pc, #268]	; (80018e4 <main+0x33c>)
 80017d6:	f000 ff23 	bl	8002620 <HAL_ADC_Start>
	   HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80017da:	f04f 31ff 	mov.w	r1, #4294967295
 80017de:	4841      	ldr	r0, [pc, #260]	; (80018e4 <main+0x33c>)
 80017e0:	f000 fff8 	bl	80027d4 <HAL_ADC_PollForConversion>
	   raw = HAL_ADC_GetValue(&hadc1);
 80017e4:	483f      	ldr	r0, [pc, #252]	; (80018e4 <main+0x33c>)
 80017e6:	f001 f8fb 	bl	80029e0 <HAL_ADC_GetValue>
 80017ea:	4603      	mov	r3, r0
 80017ec:	80fb      	strh	r3, [r7, #6]
	   HAL_ADC_Stop(&hadc1);
 80017ee:	483d      	ldr	r0, [pc, #244]	; (80018e4 <main+0x33c>)
 80017f0:	f000 ffc4 	bl	800277c <HAL_ADC_Stop>

	   //the following are the 10 temperature intervals the device can be set to by the user
	   if(raw > 0 && raw < 409.5)
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00f      	beq.n	800181a <main+0x272>
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe fdf9 	bl	80003f4 <__aeabi_i2d>
 8001802:	a325      	add	r3, pc, #148	; (adr r3, 8001898 <main+0x2f0>)
 8001804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001808:	f7ff f8d0 	bl	80009ac <__aeabi_dcmplt>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <main+0x272>
	   {
		   setTemp = 45;
 8001812:	4b35      	ldr	r3, [pc, #212]	; (80018e8 <main+0x340>)
 8001814:	222d      	movs	r2, #45	; 0x2d
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	e0e5      	b.n	80019e6 <main+0x43e>
	   }
	   else if(raw > 409.5 && raw < 819)
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fde9 	bl	80003f4 <__aeabi_i2d>
 8001822:	a31d      	add	r3, pc, #116	; (adr r3, 8001898 <main+0x2f0>)
 8001824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001828:	f7ff f8de 	bl	80009e8 <__aeabi_dcmpgt>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d008      	beq.n	8001844 <main+0x29c>
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	f240 3232 	movw	r2, #818	; 0x332
 8001838:	4293      	cmp	r3, r2
 800183a:	d803      	bhi.n	8001844 <main+0x29c>
	   {
		   setTemp = 60;
 800183c:	4b2a      	ldr	r3, [pc, #168]	; (80018e8 <main+0x340>)
 800183e:	223c      	movs	r2, #60	; 0x3c
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	e0d0      	b.n	80019e6 <main+0x43e>
	   }
	   else if(raw > 819 && raw < 1228.5)
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 800184a:	d30f      	bcc.n	800186c <main+0x2c4>
 800184c:	88fb      	ldrh	r3, [r7, #6]
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fdd0 	bl	80003f4 <__aeabi_i2d>
 8001854:	a312      	add	r3, pc, #72	; (adr r3, 80018a0 <main+0x2f8>)
 8001856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185a:	f7ff f8a7 	bl	80009ac <__aeabi_dcmplt>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <main+0x2c4>
	   	   {
	   		   setTemp = 75;
 8001864:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <main+0x340>)
 8001866:	224b      	movs	r2, #75	; 0x4b
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	e0bc      	b.n	80019e6 <main+0x43e>
	   	   }
	   else if(raw > 1228.5 && raw < 1638)
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fdc0 	bl	80003f4 <__aeabi_i2d>
 8001874:	a30a      	add	r3, pc, #40	; (adr r3, 80018a0 <main+0x2f8>)
 8001876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187a:	f7ff f8b5 	bl	80009e8 <__aeabi_dcmpgt>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d033      	beq.n	80018ec <main+0x344>
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	f240 6265 	movw	r2, #1637	; 0x665
 800188a:	4293      	cmp	r3, r2
 800188c:	d82e      	bhi.n	80018ec <main+0x344>
	   	   {
	   		   setTemp = 90;
 800188e:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <main+0x340>)
 8001890:	225a      	movs	r2, #90	; 0x5a
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	e0a7      	b.n	80019e6 <main+0x43e>
 8001896:	bf00      	nop
 8001898:	00000000 	.word	0x00000000
 800189c:	40799800 	.word	0x40799800
 80018a0:	00000000 	.word	0x00000000
 80018a4:	40933200 	.word	0x40933200
 80018a8:	200000d8 	.word	0x200000d8
 80018ac:	40010800 	.word	0x40010800
 80018b0:	40011000 	.word	0x40011000
 80018b4:	20000054 	.word	0x20000054
 80018b8:	20000058 	.word	0x20000058
 80018bc:	2000005c 	.word	0x2000005c
 80018c0:	20000060 	.word	0x20000060
 80018c4:	20000064 	.word	0x20000064
 80018c8:	51eb851f 	.word	0x51eb851f
 80018cc:	cccccccd 	.word	0xcccccccd
 80018d0:	20000150 	.word	0x20000150
 80018d4:	200000d4 	.word	0x200000d4
 80018d8:	20000154 	.word	0x20000154
 80018dc:	20000000 	.word	0x20000000
 80018e0:	40010c00 	.word	0x40010c00
 80018e4:	20000120 	.word	0x20000120
 80018e8:	200000d0 	.word	0x200000d0
	   	   }
	   else if(raw > 1638 && raw < 2047.5)
 80018ec:	88fb      	ldrh	r3, [r7, #6]
 80018ee:	f240 6266 	movw	r2, #1638	; 0x666
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d90f      	bls.n	8001916 <main+0x36e>
 80018f6:	88fb      	ldrh	r3, [r7, #6]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fd7b 	bl	80003f4 <__aeabi_i2d>
 80018fe:	a368      	add	r3, pc, #416	; (adr r3, 8001aa0 <main+0x4f8>)
 8001900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001904:	f7ff f852 	bl	80009ac <__aeabi_dcmplt>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <main+0x36e>
	   	   {
	   		   setTemp = 105;
 800190e:	4b6a      	ldr	r3, [pc, #424]	; (8001ab8 <main+0x510>)
 8001910:	2269      	movs	r2, #105	; 0x69
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	e067      	b.n	80019e6 <main+0x43e>
	   	   }
	   else if(raw > 2047.5 && raw < 2457)
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fd6b 	bl	80003f4 <__aeabi_i2d>
 800191e:	a360      	add	r3, pc, #384	; (adr r3, 8001aa0 <main+0x4f8>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	f7ff f860 	bl	80009e8 <__aeabi_dcmpgt>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d008      	beq.n	8001940 <main+0x398>
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	f640 1298 	movw	r2, #2456	; 0x998
 8001934:	4293      	cmp	r3, r2
 8001936:	d803      	bhi.n	8001940 <main+0x398>
	   	   {
	   		   setTemp = 120;
 8001938:	4b5f      	ldr	r3, [pc, #380]	; (8001ab8 <main+0x510>)
 800193a:	2278      	movs	r2, #120	; 0x78
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	e052      	b.n	80019e6 <main+0x43e>
	   	   }
	   else if(raw > 2457 && raw < 2866.5)
 8001940:	88fb      	ldrh	r3, [r7, #6]
 8001942:	f640 1299 	movw	r2, #2457	; 0x999
 8001946:	4293      	cmp	r3, r2
 8001948:	d90f      	bls.n	800196a <main+0x3c2>
 800194a:	88fb      	ldrh	r3, [r7, #6]
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fd51 	bl	80003f4 <__aeabi_i2d>
 8001952:	a355      	add	r3, pc, #340	; (adr r3, 8001aa8 <main+0x500>)
 8001954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001958:	f7ff f828 	bl	80009ac <__aeabi_dcmplt>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <main+0x3c2>
	   	   {
	   		   setTemp = 135;
 8001962:	4b55      	ldr	r3, [pc, #340]	; (8001ab8 <main+0x510>)
 8001964:	2287      	movs	r2, #135	; 0x87
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	e03d      	b.n	80019e6 <main+0x43e>
	   	   }
	   else if(raw > 2866.5 && raw < 3276)
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fd41 	bl	80003f4 <__aeabi_i2d>
 8001972:	a34d      	add	r3, pc, #308	; (adr r3, 8001aa8 <main+0x500>)
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	f7ff f836 	bl	80009e8 <__aeabi_dcmpgt>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d008      	beq.n	8001994 <main+0x3ec>
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	f640 42cb 	movw	r2, #3275	; 0xccb
 8001988:	4293      	cmp	r3, r2
 800198a:	d803      	bhi.n	8001994 <main+0x3ec>
	   	   {
	   		   setTemp = 150;
 800198c:	4b4a      	ldr	r3, [pc, #296]	; (8001ab8 <main+0x510>)
 800198e:	2296      	movs	r2, #150	; 0x96
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	e028      	b.n	80019e6 <main+0x43e>
	   	   }
	   else if(raw > 3276 && raw < 3685.5)
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	f640 42cc 	movw	r2, #3276	; 0xccc
 800199a:	4293      	cmp	r3, r2
 800199c:	d90f      	bls.n	80019be <main+0x416>
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe fd27 	bl	80003f4 <__aeabi_i2d>
 80019a6:	a342      	add	r3, pc, #264	; (adr r3, 8001ab0 <main+0x508>)
 80019a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ac:	f7fe fffe 	bl	80009ac <__aeabi_dcmplt>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <main+0x416>
	   	   {
	   		   setTemp = 165;
 80019b6:	4b40      	ldr	r3, [pc, #256]	; (8001ab8 <main+0x510>)
 80019b8:	22a5      	movs	r2, #165	; 0xa5
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	e013      	b.n	80019e6 <main+0x43e>
	   	   }
	   else if(raw > 3685.5 && raw < 4095)
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fd17 	bl	80003f4 <__aeabi_i2d>
 80019c6:	a33a      	add	r3, pc, #232	; (adr r3, 8001ab0 <main+0x508>)
 80019c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019cc:	f7ff f80c 	bl	80009e8 <__aeabi_dcmpgt>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d007      	beq.n	80019e6 <main+0x43e>
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80019dc:	4293      	cmp	r3, r2
 80019de:	d802      	bhi.n	80019e6 <main+0x43e>
	   	   {
	   		   setTemp = 180;
 80019e0:	4b35      	ldr	r3, [pc, #212]	; (8001ab8 <main+0x510>)
 80019e2:	22b4      	movs	r2, #180	; 0xb4
 80019e4:	601a      	str	r2, [r3, #0]
	   	   }
	  //----------------------------------------------------------------------------------end user input----------------

	   //---------------------------------------------------------------------------------get tracking value-------------------------------
	   	   ADC_select_CH11(); //upper right LDR
 80019e6:	f7ff fd67 	bl	80014b8 <ADC_select_CH11>
	   	   HAL_ADC_Start(&hadc1);
 80019ea:	4834      	ldr	r0, [pc, #208]	; (8001abc <main+0x514>)
 80019ec:	f000 fe18 	bl	8002620 <HAL_ADC_Start>
	   	   HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80019f0:	f04f 31ff 	mov.w	r1, #4294967295
 80019f4:	4831      	ldr	r0, [pc, #196]	; (8001abc <main+0x514>)
 80019f6:	f000 feed 	bl	80027d4 <HAL_ADC_PollForConversion>
	   	   ADCval[0] = HAL_ADC_GetValue(&hadc1);
 80019fa:	4830      	ldr	r0, [pc, #192]	; (8001abc <main+0x514>)
 80019fc:	f000 fff0 	bl	80029e0 <HAL_ADC_GetValue>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff f900 	bl	8000c08 <__aeabi_ui2f>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <main+0x518>)
 8001a0c:	601a      	str	r2, [r3, #0]
	   	   HAL_ADC_Stop(&hadc1);
 8001a0e:	482b      	ldr	r0, [pc, #172]	; (8001abc <main+0x514>)
 8001a10:	f000 feb4 	bl	800277c <HAL_ADC_Stop>

	   	   ADC_select_CH12(); //upper left LDR
 8001a14:	f7ff fd6e 	bl	80014f4 <ADC_select_CH12>
	   	   HAL_ADC_Start(&hadc1);
 8001a18:	4828      	ldr	r0, [pc, #160]	; (8001abc <main+0x514>)
 8001a1a:	f000 fe01 	bl	8002620 <HAL_ADC_Start>
	   	   HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001a1e:	f04f 31ff 	mov.w	r1, #4294967295
 8001a22:	4826      	ldr	r0, [pc, #152]	; (8001abc <main+0x514>)
 8001a24:	f000 fed6 	bl	80027d4 <HAL_ADC_PollForConversion>
	   	   ADCval[1] = HAL_ADC_GetValue(&hadc1);
 8001a28:	4824      	ldr	r0, [pc, #144]	; (8001abc <main+0x514>)
 8001a2a:	f000 ffd9 	bl	80029e0 <HAL_ADC_GetValue>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff f8e9 	bl	8000c08 <__aeabi_ui2f>
 8001a36:	4602      	mov	r2, r0
 8001a38:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <main+0x518>)
 8001a3a:	605a      	str	r2, [r3, #4]
	   	   HAL_ADC_Stop(&hadc1);
 8001a3c:	481f      	ldr	r0, [pc, #124]	; (8001abc <main+0x514>)
 8001a3e:	f000 fe9d 	bl	800277c <HAL_ADC_Stop>

	   		ADC_select_CH13(); //lower right LDR
 8001a42:	f7ff fd75 	bl	8001530 <ADC_select_CH13>
	   		HAL_ADC_Start(&hadc1);
 8001a46:	481d      	ldr	r0, [pc, #116]	; (8001abc <main+0x514>)
 8001a48:	f000 fdea 	bl	8002620 <HAL_ADC_Start>
	   		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a50:	481a      	ldr	r0, [pc, #104]	; (8001abc <main+0x514>)
 8001a52:	f000 febf 	bl	80027d4 <HAL_ADC_PollForConversion>
	   		ADCval[2] = HAL_ADC_GetValue(&hadc1);
 8001a56:	4819      	ldr	r0, [pc, #100]	; (8001abc <main+0x514>)
 8001a58:	f000 ffc2 	bl	80029e0 <HAL_ADC_GetValue>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff f8d2 	bl	8000c08 <__aeabi_ui2f>
 8001a64:	4602      	mov	r2, r0
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <main+0x518>)
 8001a68:	609a      	str	r2, [r3, #8]
	   		HAL_ADC_Stop(&hadc1);
 8001a6a:	4814      	ldr	r0, [pc, #80]	; (8001abc <main+0x514>)
 8001a6c:	f000 fe86 	bl	800277c <HAL_ADC_Stop>

	   		ADC_select_CH0(); //lower left LDR
 8001a70:	f7ff fd7c 	bl	800156c <ADC_select_CH0>
	   		HAL_ADC_Start(&hadc1);
 8001a74:	4811      	ldr	r0, [pc, #68]	; (8001abc <main+0x514>)
 8001a76:	f000 fdd3 	bl	8002620 <HAL_ADC_Start>
	   		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001a7a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7e:	480f      	ldr	r0, [pc, #60]	; (8001abc <main+0x514>)
 8001a80:	f000 fea8 	bl	80027d4 <HAL_ADC_PollForConversion>
	   		ADCval[3] = HAL_ADC_GetValue(&hadc1);
 8001a84:	480d      	ldr	r0, [pc, #52]	; (8001abc <main+0x514>)
 8001a86:	f000 ffab 	bl	80029e0 <HAL_ADC_GetValue>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff f8bb 	bl	8000c08 <__aeabi_ui2f>
 8001a92:	4602      	mov	r2, r0
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <main+0x518>)
 8001a96:	60da      	str	r2, [r3, #12]
	   		HAL_ADC_Stop(&hadc1);
 8001a98:	4808      	ldr	r0, [pc, #32]	; (8001abc <main+0x514>)
 8001a9a:	f000 fe6f 	bl	800277c <HAL_ADC_Stop>
	  temp1=Max31855_Read_Temp1(); 			// Gets Temperature 1 from MAX31855
 8001a9e:	e5f1      	b.n	8001684 <main+0xdc>
 8001aa0:	00000000 	.word	0x00000000
 8001aa4:	409ffe00 	.word	0x409ffe00
 8001aa8:	00000000 	.word	0x00000000
 8001aac:	40a66500 	.word	0x40a66500
 8001ab0:	00000000 	.word	0x00000000
 8001ab4:	40accb00 	.word	0x40accb00
 8001ab8:	200000d0 	.word	0x200000d0
 8001abc:	20000120 	.word	0x20000120
 8001ac0:	2000019c 	.word	0x2000019c

08001ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b094      	sub	sp, #80	; 0x50
 8001ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ace:	2228      	movs	r2, #40	; 0x28
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f003 fe0c 	bl	80056f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001af4:	2302      	movs	r3, #2
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001af8:	2301      	movs	r3, #1
 8001afa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001afc:	2310      	movs	r3, #16
 8001afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b00:	2302      	movs	r3, #2
 8001b02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001b04:	2300      	movs	r3, #0
 8001b06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001b08:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b12:	4618      	mov	r0, r3
 8001b14:	f001 fc1c 	bl	8003350 <HAL_RCC_OscConfig>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001b1e:	f000 fa29 	bl	8001f74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b22:	230f      	movs	r3, #15
 8001b24:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b26:	2302      	movs	r3, #2
 8001b28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b32:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b34:	2300      	movs	r3, #0
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	2102      	movs	r1, #2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f001 fe86 	bl	8003850 <HAL_RCC_ClockConfig>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001b4a:	f000 fa13 	bl	8001f74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f002 f815 	bl	8003b88 <HAL_RCCEx_PeriphCLKConfig>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001b64:	f000 fa06 	bl	8001f74 <Error_Handler>
  }
}
 8001b68:	bf00      	nop
 8001b6a:	3750      	adds	r7, #80	; 0x50
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001b80:	4b35      	ldr	r3, [pc, #212]	; (8001c58 <MX_ADC1_Init+0xe8>)
 8001b82:	4a36      	ldr	r2, [pc, #216]	; (8001c5c <MX_ADC1_Init+0xec>)
 8001b84:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001b86:	4b34      	ldr	r3, [pc, #208]	; (8001c58 <MX_ADC1_Init+0xe8>)
 8001b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b8e:	4b32      	ldr	r3, [pc, #200]	; (8001c58 <MX_ADC1_Init+0xe8>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b94:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <MX_ADC1_Init+0xe8>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b9a:	4b2f      	ldr	r3, [pc, #188]	; (8001c58 <MX_ADC1_Init+0xe8>)
 8001b9c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001ba0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ba2:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <MX_ADC1_Init+0xe8>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 8001ba8:	4b2b      	ldr	r3, [pc, #172]	; (8001c58 <MX_ADC1_Init+0xe8>)
 8001baa:	2205      	movs	r2, #5
 8001bac:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bae:	482a      	ldr	r0, [pc, #168]	; (8001c58 <MX_ADC1_Init+0xe8>)
 8001bb0:	f000 fc5e 	bl	8002470 <HAL_ADC_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001bba:	f000 f9db 	bl	8001f74 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001bbe:	230a      	movs	r3, #10
 8001bc0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4822      	ldr	r0, [pc, #136]	; (8001c58 <MX_ADC1_Init+0xe8>)
 8001bd0:	f000 ff12 	bl	80029f8 <HAL_ADC_ConfigChannel>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001bda:	f000 f9cb 	bl	8001f74 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001bde:	230b      	movs	r3, #11
 8001be0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001be2:	2302      	movs	r3, #2
 8001be4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	4619      	mov	r1, r3
 8001bea:	481b      	ldr	r0, [pc, #108]	; (8001c58 <MX_ADC1_Init+0xe8>)
 8001bec:	f000 ff04 	bl	80029f8 <HAL_ADC_ConfigChannel>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001bf6:	f000 f9bd 	bl	8001f74 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001bfa:	230c      	movs	r3, #12
 8001bfc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	4619      	mov	r1, r3
 8001c06:	4814      	ldr	r0, [pc, #80]	; (8001c58 <MX_ADC1_Init+0xe8>)
 8001c08:	f000 fef6 	bl	80029f8 <HAL_ADC_ConfigChannel>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001c12:	f000 f9af 	bl	8001f74 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001c16:	230d      	movs	r3, #13
 8001c18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	4619      	mov	r1, r3
 8001c22:	480d      	ldr	r0, [pc, #52]	; (8001c58 <MX_ADC1_Init+0xe8>)
 8001c24:	f000 fee8 	bl	80029f8 <HAL_ADC_ConfigChannel>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001c2e:	f000 f9a1 	bl	8001f74 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001c36:	2305      	movs	r3, #5
 8001c38:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4806      	ldr	r0, [pc, #24]	; (8001c58 <MX_ADC1_Init+0xe8>)
 8001c40:	f000 feda 	bl	80029f8 <HAL_ADC_ConfigChannel>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001c4a:	f000 f993 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000120 	.word	0x20000120
 8001c5c:	40012400 	.word	0x40012400

08001c60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c64:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001c66:	4a18      	ldr	r2, [pc, #96]	; (8001cc8 <MX_SPI1_Init+0x68>)
 8001c68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c6a:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001c6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c72:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c78:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001c92:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001c94:	2228      	movs	r2, #40	; 0x28
 8001c96:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c98:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001cac:	220a      	movs	r2, #10
 8001cae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cb0:	4804      	ldr	r0, [pc, #16]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001cb2:	f002 f8db 	bl	8003e6c <HAL_SPI_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001cbc:	f000 f95a 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000078 	.word	0x20000078
 8001cc8:	40013000 	.word	0x40013000

08001ccc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08e      	sub	sp, #56	; 0x38
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce0:	f107 0320 	add.w	r3, r7, #32
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
 8001cf8:	615a      	str	r2, [r3, #20]
 8001cfa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cfc:	4b38      	ldr	r3, [pc, #224]	; (8001de0 <MX_TIM3_Init+0x114>)
 8001cfe:	4a39      	ldr	r2, [pc, #228]	; (8001de4 <MX_TIM3_Init+0x118>)
 8001d00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 19;
 8001d02:	4b37      	ldr	r3, [pc, #220]	; (8001de0 <MX_TIM3_Init+0x114>)
 8001d04:	2213      	movs	r2, #19
 8001d06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d08:	4b35      	ldr	r3, [pc, #212]	; (8001de0 <MX_TIM3_Init+0x114>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001d0e:	4b34      	ldr	r3, [pc, #208]	; (8001de0 <MX_TIM3_Init+0x114>)
 8001d10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d16:	4b32      	ldr	r3, [pc, #200]	; (8001de0 <MX_TIM3_Init+0x114>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d1c:	4b30      	ldr	r3, [pc, #192]	; (8001de0 <MX_TIM3_Init+0x114>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d22:	482f      	ldr	r0, [pc, #188]	; (8001de0 <MX_TIM3_Init+0x114>)
 8001d24:	f002 fdd8 	bl	80048d8 <HAL_TIM_Base_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001d2e:	f000 f921 	bl	8001f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d36:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4828      	ldr	r0, [pc, #160]	; (8001de0 <MX_TIM3_Init+0x114>)
 8001d40:	f003 f81c 	bl	8004d7c <HAL_TIM_ConfigClockSource>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001d4a:	f000 f913 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d4e:	4824      	ldr	r0, [pc, #144]	; (8001de0 <MX_TIM3_Init+0x114>)
 8001d50:	f002 fe5c 	bl	8004a0c <HAL_TIM_PWM_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001d5a:	f000 f90b 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d66:	f107 0320 	add.w	r3, r7, #32
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	481c      	ldr	r0, [pc, #112]	; (8001de0 <MX_TIM3_Init+0x114>)
 8001d6e:	f003 fb61 	bl	8005434 <HAL_TIMEx_MasterConfigSynchronization>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001d78:	f000 f8fc 	bl	8001f74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d7c:	2360      	movs	r3, #96	; 0x60
 8001d7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001d80:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	2200      	movs	r2, #0
 8001d92:	4619      	mov	r1, r3
 8001d94:	4812      	ldr	r0, [pc, #72]	; (8001de0 <MX_TIM3_Init+0x114>)
 8001d96:	f002 ff33 	bl	8004c00 <HAL_TIM_PWM_ConfigChannel>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001da0:	f000 f8e8 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001da4:	1d3b      	adds	r3, r7, #4
 8001da6:	2204      	movs	r2, #4
 8001da8:	4619      	mov	r1, r3
 8001daa:	480d      	ldr	r0, [pc, #52]	; (8001de0 <MX_TIM3_Init+0x114>)
 8001dac:	f002 ff28 	bl	8004c00 <HAL_TIM_PWM_ConfigChannel>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001db6:	f000 f8dd 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dba:	1d3b      	adds	r3, r7, #4
 8001dbc:	2208      	movs	r2, #8
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4807      	ldr	r0, [pc, #28]	; (8001de0 <MX_TIM3_Init+0x114>)
 8001dc2:	f002 ff1d 	bl	8004c00 <HAL_TIM_PWM_ConfigChannel>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001dcc:	f000 f8d2 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001dd0:	4803      	ldr	r0, [pc, #12]	; (8001de0 <MX_TIM3_Init+0x114>)
 8001dd2:	f000 f9db 	bl	800218c <HAL_TIM_MspPostInit>

}
 8001dd6:	bf00      	nop
 8001dd8:	3738      	adds	r7, #56	; 0x38
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200000d8 	.word	0x200000d8
 8001de4:	40000400 	.word	0x40000400

08001de8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001dee:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <MX_USART2_UART_Init+0x50>)
 8001df0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001df4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001df8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e0e:	220c      	movs	r2, #12
 8001e10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e12:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e1e:	4805      	ldr	r0, [pc, #20]	; (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e20:	f003 fb66 	bl	80054f0 <HAL_UART_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e2a:	f000 f8a3 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000158 	.word	0x20000158
 8001e38:	40004400 	.word	0x40004400

08001e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e42:	f107 0310 	add.w	r3, r7, #16
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e50:	4b43      	ldr	r3, [pc, #268]	; (8001f60 <MX_GPIO_Init+0x124>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	4a42      	ldr	r2, [pc, #264]	; (8001f60 <MX_GPIO_Init+0x124>)
 8001e56:	f043 0310 	orr.w	r3, r3, #16
 8001e5a:	6193      	str	r3, [r2, #24]
 8001e5c:	4b40      	ldr	r3, [pc, #256]	; (8001f60 <MX_GPIO_Init+0x124>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	f003 0310 	and.w	r3, r3, #16
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e68:	4b3d      	ldr	r3, [pc, #244]	; (8001f60 <MX_GPIO_Init+0x124>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	4a3c      	ldr	r2, [pc, #240]	; (8001f60 <MX_GPIO_Init+0x124>)
 8001e6e:	f043 0320 	orr.w	r3, r3, #32
 8001e72:	6193      	str	r3, [r2, #24]
 8001e74:	4b3a      	ldr	r3, [pc, #232]	; (8001f60 <MX_GPIO_Init+0x124>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	f003 0320 	and.w	r3, r3, #32
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e80:	4b37      	ldr	r3, [pc, #220]	; (8001f60 <MX_GPIO_Init+0x124>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	4a36      	ldr	r2, [pc, #216]	; (8001f60 <MX_GPIO_Init+0x124>)
 8001e86:	f043 0304 	orr.w	r3, r3, #4
 8001e8a:	6193      	str	r3, [r2, #24]
 8001e8c:	4b34      	ldr	r3, [pc, #208]	; (8001f60 <MX_GPIO_Init+0x124>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e98:	4b31      	ldr	r3, [pc, #196]	; (8001f60 <MX_GPIO_Init+0x124>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	4a30      	ldr	r2, [pc, #192]	; (8001f60 <MX_GPIO_Init+0x124>)
 8001e9e:	f043 0308 	orr.w	r3, r3, #8
 8001ea2:	6193      	str	r3, [r2, #24]
 8001ea4:	4b2e      	ldr	r3, [pc, #184]	; (8001f60 <MX_GPIO_Init+0x124>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f641 71f2 	movw	r1, #8178	; 0x1ff2
 8001eb6:	482b      	ldr	r0, [pc, #172]	; (8001f64 <MX_GPIO_Init+0x128>)
 8001eb8:	f001 fa10 	bl	80032dc <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D1_Pin|D2_Pin|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f44f 6123 	mov.w	r1, #2608	; 0xa30
 8001ec2:	4829      	ldr	r0, [pc, #164]	; (8001f68 <MX_GPIO_Init+0x12c>)
 8001ec4:	f001 fa0a 	bl	80032dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11 
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f64f 3187 	movw	r1, #64391	; 0xfb87
 8001ece:	4827      	ldr	r0, [pc, #156]	; (8001f6c <MX_GPIO_Init+0x130>)
 8001ed0:	f001 fa04 	bl	80032dc <HAL_GPIO_WritePin>
                          |D3_Pin|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ed4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ed8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001eda:	4b25      	ldr	r3, [pc, #148]	; (8001f70 <MX_GPIO_Init+0x134>)
 8001edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ee2:	f107 0310 	add.w	r3, r7, #16
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	481f      	ldr	r0, [pc, #124]	; (8001f68 <MX_GPIO_Init+0x12c>)
 8001eea:	f001 f89d 	bl	8003028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA5 PA6 
                           PA7 PA8 PA9 PA10 
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8001eee:	f641 73f2 	movw	r3, #8178	; 0x1ff2
 8001ef2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2302      	movs	r3, #2
 8001efe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f00:	f107 0310 	add.w	r3, r7, #16
 8001f04:	4619      	mov	r1, r3
 8001f06:	4817      	ldr	r0, [pc, #92]	; (8001f64 <MX_GPIO_Init+0x128>)
 8001f08:	f001 f88e 	bl	8003028 <HAL_GPIO_Init>

  /*Configure GPIO pins : D1_Pin D2_Pin PC9 PC11 */
  GPIO_InitStruct.Pin = D1_Pin|D2_Pin|GPIO_PIN_9|GPIO_PIN_11;
 8001f0c:	f44f 6323 	mov.w	r3, #2608	; 0xa30
 8001f10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f12:	2301      	movs	r3, #1
 8001f14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f1e:	f107 0310 	add.w	r3, r7, #16
 8001f22:	4619      	mov	r1, r3
 8001f24:	4810      	ldr	r0, [pc, #64]	; (8001f68 <MX_GPIO_Init+0x12c>)
 8001f26:	f001 f87f 	bl	8003028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB11 
                           D3_Pin PB13 PB14 PB15 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11 
 8001f2a:	f64f 3387 	movw	r3, #64391	; 0xfb87
 8001f2e:	613b      	str	r3, [r7, #16]
                          |D3_Pin|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f30:	2301      	movs	r3, #1
 8001f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3c:	f107 0310 	add.w	r3, r7, #16
 8001f40:	4619      	mov	r1, r3
 8001f42:	480a      	ldr	r0, [pc, #40]	; (8001f6c <MX_GPIO_Init+0x130>)
 8001f44:	f001 f870 	bl	8003028 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	2028      	movs	r0, #40	; 0x28
 8001f4e:	f000 ffbe 	bl	8002ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f52:	2028      	movs	r0, #40	; 0x28
 8001f54:	f000 ffd7 	bl	8002f06 <HAL_NVIC_EnableIRQ>

}
 8001f58:	bf00      	nop
 8001f5a:	3720      	adds	r7, #32
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40010800 	.word	0x40010800
 8001f68:	40011000 	.word	0x40011000
 8001f6c:	40010c00 	.word	0x40010c00
 8001f70:	10110000 	.word	0x10110000

08001f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f86:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <HAL_MspInit+0x5c>)
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	4a14      	ldr	r2, [pc, #80]	; (8001fdc <HAL_MspInit+0x5c>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	6193      	str	r3, [r2, #24]
 8001f92:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <HAL_MspInit+0x5c>)
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f9e:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <HAL_MspInit+0x5c>)
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	4a0e      	ldr	r2, [pc, #56]	; (8001fdc <HAL_MspInit+0x5c>)
 8001fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	61d3      	str	r3, [r2, #28]
 8001faa:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <HAL_MspInit+0x5c>)
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	607b      	str	r3, [r7, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <HAL_MspInit+0x60>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	4a04      	ldr	r2, [pc, #16]	; (8001fe0 <HAL_MspInit+0x60>)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40010000 	.word	0x40010000

08001fe4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	; 0x28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0318 	add.w	r3, r7, #24
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a1f      	ldr	r2, [pc, #124]	; (800207c <HAL_ADC_MspInit+0x98>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d137      	bne.n	8002074 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002004:	4b1e      	ldr	r3, [pc, #120]	; (8002080 <HAL_ADC_MspInit+0x9c>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	4a1d      	ldr	r2, [pc, #116]	; (8002080 <HAL_ADC_MspInit+0x9c>)
 800200a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800200e:	6193      	str	r3, [r2, #24]
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <HAL_ADC_MspInit+0x9c>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800201c:	4b18      	ldr	r3, [pc, #96]	; (8002080 <HAL_ADC_MspInit+0x9c>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	4a17      	ldr	r2, [pc, #92]	; (8002080 <HAL_ADC_MspInit+0x9c>)
 8002022:	f043 0310 	orr.w	r3, r3, #16
 8002026:	6193      	str	r3, [r2, #24]
 8002028:	4b15      	ldr	r3, [pc, #84]	; (8002080 <HAL_ADC_MspInit+0x9c>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_ADC_MspInit+0x9c>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	4a11      	ldr	r2, [pc, #68]	; (8002080 <HAL_ADC_MspInit+0x9c>)
 800203a:	f043 0304 	orr.w	r3, r3, #4
 800203e:	6193      	str	r3, [r2, #24]
 8002040:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_ADC_MspInit+0x9c>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800204c:	230f      	movs	r3, #15
 800204e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002050:	2303      	movs	r3, #3
 8002052:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002054:	f107 0318 	add.w	r3, r7, #24
 8002058:	4619      	mov	r1, r3
 800205a:	480a      	ldr	r0, [pc, #40]	; (8002084 <HAL_ADC_MspInit+0xa0>)
 800205c:	f000 ffe4 	bl	8003028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002060:	2301      	movs	r3, #1
 8002062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002064:	2303      	movs	r3, #3
 8002066:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002068:	f107 0318 	add.w	r3, r7, #24
 800206c:	4619      	mov	r1, r3
 800206e:	4806      	ldr	r0, [pc, #24]	; (8002088 <HAL_ADC_MspInit+0xa4>)
 8002070:	f000 ffda 	bl	8003028 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002074:	bf00      	nop
 8002076:	3728      	adds	r7, #40	; 0x28
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40012400 	.word	0x40012400
 8002080:	40021000 	.word	0x40021000
 8002084:	40011000 	.word	0x40011000
 8002088:	40010800 	.word	0x40010800

0800208c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	; 0x28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a26      	ldr	r2, [pc, #152]	; (8002140 <HAL_SPI_MspInit+0xb4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d145      	bne.n	8002138 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020ac:	4b25      	ldr	r3, [pc, #148]	; (8002144 <HAL_SPI_MspInit+0xb8>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	4a24      	ldr	r2, [pc, #144]	; (8002144 <HAL_SPI_MspInit+0xb8>)
 80020b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020b6:	6193      	str	r3, [r2, #24]
 80020b8:	4b22      	ldr	r3, [pc, #136]	; (8002144 <HAL_SPI_MspInit+0xb8>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c4:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <HAL_SPI_MspInit+0xb8>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	4a1e      	ldr	r2, [pc, #120]	; (8002144 <HAL_SPI_MspInit+0xb8>)
 80020ca:	f043 0308 	orr.w	r3, r3, #8
 80020ce:	6193      	str	r3, [r2, #24]
 80020d0:	4b1c      	ldr	r3, [pc, #112]	; (8002144 <HAL_SPI_MspInit+0xb8>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80020dc:	2328      	movs	r3, #40	; 0x28
 80020de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e0:	2302      	movs	r3, #2
 80020e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020e4:	2303      	movs	r3, #3
 80020e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	4619      	mov	r1, r3
 80020ee:	4816      	ldr	r0, [pc, #88]	; (8002148 <HAL_SPI_MspInit+0xbc>)
 80020f0:	f000 ff9a 	bl	8003028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020f4:	2310      	movs	r3, #16
 80020f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002100:	f107 0314 	add.w	r3, r7, #20
 8002104:	4619      	mov	r1, r3
 8002106:	4810      	ldr	r0, [pc, #64]	; (8002148 <HAL_SPI_MspInit+0xbc>)
 8002108:	f000 ff8e 	bl	8003028 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800210c:	4b0f      	ldr	r3, [pc, #60]	; (800214c <HAL_SPI_MspInit+0xc0>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
 8002122:	4a0a      	ldr	r2, [pc, #40]	; (800214c <HAL_SPI_MspInit+0xc0>)
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002128:	2200      	movs	r2, #0
 800212a:	2100      	movs	r1, #0
 800212c:	2023      	movs	r0, #35	; 0x23
 800212e:	f000 fece 	bl	8002ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002132:	2023      	movs	r0, #35	; 0x23
 8002134:	f000 fee7 	bl	8002f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002138:	bf00      	nop
 800213a:	3728      	adds	r7, #40	; 0x28
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40013000 	.word	0x40013000
 8002144:	40021000 	.word	0x40021000
 8002148:	40010c00 	.word	0x40010c00
 800214c:	40010000 	.word	0x40010000

08002150 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a09      	ldr	r2, [pc, #36]	; (8002184 <HAL_TIM_Base_MspInit+0x34>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d10b      	bne.n	800217a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002162:	4b09      	ldr	r3, [pc, #36]	; (8002188 <HAL_TIM_Base_MspInit+0x38>)
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	4a08      	ldr	r2, [pc, #32]	; (8002188 <HAL_TIM_Base_MspInit+0x38>)
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	61d3      	str	r3, [r2, #28]
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_TIM_Base_MspInit+0x38>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr
 8002184:	40000400 	.word	0x40000400
 8002188:	40021000 	.word	0x40021000

0800218c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a19      	ldr	r2, [pc, #100]	; (800220c <HAL_TIM_MspPostInit+0x80>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d12a      	bne.n	8002202 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ac:	4b18      	ldr	r3, [pc, #96]	; (8002210 <HAL_TIM_MspPostInit+0x84>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	4a17      	ldr	r2, [pc, #92]	; (8002210 <HAL_TIM_MspPostInit+0x84>)
 80021b2:	f043 0310 	orr.w	r3, r3, #16
 80021b6:	6193      	str	r3, [r2, #24]
 80021b8:	4b15      	ldr	r3, [pc, #84]	; (8002210 <HAL_TIM_MspPostInit+0x84>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80021c4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80021c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	2302      	movs	r3, #2
 80021cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ce:	2302      	movs	r3, #2
 80021d0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d2:	f107 030c 	add.w	r3, r7, #12
 80021d6:	4619      	mov	r1, r3
 80021d8:	480e      	ldr	r0, [pc, #56]	; (8002214 <HAL_TIM_MspPostInit+0x88>)
 80021da:	f000 ff25 	bl	8003028 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80021de:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <HAL_TIM_MspPostInit+0x8c>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	61fb      	str	r3, [r7, #28]
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80021ea:	61fb      	str	r3, [r7, #28]
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80021f2:	61fb      	str	r3, [r7, #28]
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80021fa:	61fb      	str	r3, [r7, #28]
 80021fc:	4a06      	ldr	r2, [pc, #24]	; (8002218 <HAL_TIM_MspPostInit+0x8c>)
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002202:	bf00      	nop
 8002204:	3720      	adds	r7, #32
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40000400 	.word	0x40000400
 8002210:	40021000 	.word	0x40021000
 8002214:	40011000 	.word	0x40011000
 8002218:	40010000 	.word	0x40010000

0800221c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 0310 	add.w	r3, r7, #16
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a15      	ldr	r2, [pc, #84]	; (800228c <HAL_UART_MspInit+0x70>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d123      	bne.n	8002284 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800223c:	4b14      	ldr	r3, [pc, #80]	; (8002290 <HAL_UART_MspInit+0x74>)
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	4a13      	ldr	r2, [pc, #76]	; (8002290 <HAL_UART_MspInit+0x74>)
 8002242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002246:	61d3      	str	r3, [r2, #28]
 8002248:	4b11      	ldr	r3, [pc, #68]	; (8002290 <HAL_UART_MspInit+0x74>)
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002254:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <HAL_UART_MspInit+0x74>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	4a0d      	ldr	r2, [pc, #52]	; (8002290 <HAL_UART_MspInit+0x74>)
 800225a:	f043 0304 	orr.w	r3, r3, #4
 800225e:	6193      	str	r3, [r2, #24]
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_UART_MspInit+0x74>)
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800226c:	230c      	movs	r3, #12
 800226e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002274:	2302      	movs	r3, #2
 8002276:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002278:	f107 0310 	add.w	r3, r7, #16
 800227c:	4619      	mov	r1, r3
 800227e:	4805      	ldr	r0, [pc, #20]	; (8002294 <HAL_UART_MspInit+0x78>)
 8002280:	f000 fed2 	bl	8003028 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002284:	bf00      	nop
 8002286:	3720      	adds	r7, #32
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40004400 	.word	0x40004400
 8002290:	40021000 	.word	0x40021000
 8002294:	40010800 	.word	0x40010800

08002298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022a8:	e7fe      	b.n	80022a8 <HardFault_Handler+0x4>

080022aa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022ae:	e7fe      	b.n	80022ae <MemManage_Handler+0x4>

080022b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b4:	e7fe      	b.n	80022b4 <BusFault_Handler+0x4>

080022b6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022ba:	e7fe      	b.n	80022ba <UsageFault_Handler+0x4>

080022bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022e4:	f000 f886 	bl	80023f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022e8:	bf00      	nop
 80022ea:	bd80      	pop	{r7, pc}

080022ec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80022f0:	4802      	ldr	r0, [pc, #8]	; (80022fc <SPI1_IRQHandler+0x10>)
 80022f2:	f002 f8f3 	bl	80044dc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000078 	.word	0x20000078

08002300 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002304:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002308:	f001 f800 	bl	800330c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}

08002310 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800231c:	480c      	ldr	r0, [pc, #48]	; (8002350 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800231e:	490d      	ldr	r1, [pc, #52]	; (8002354 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002320:	4a0d      	ldr	r2, [pc, #52]	; (8002358 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002324:	e002      	b.n	800232c <LoopCopyDataInit>

08002326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800232a:	3304      	adds	r3, #4

0800232c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800232c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800232e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002330:	d3f9      	bcc.n	8002326 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002332:	4a0a      	ldr	r2, [pc, #40]	; (800235c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002334:	4c0a      	ldr	r4, [pc, #40]	; (8002360 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002338:	e001      	b.n	800233e <LoopFillZerobss>

0800233a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800233a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800233c:	3204      	adds	r2, #4

0800233e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800233e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002340:	d3fb      	bcc.n	800233a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002342:	f7ff ffe5 	bl	8002310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002346:	f003 f9af 	bl	80056a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800234a:	f7ff f92d 	bl	80015a8 <main>
  bx lr
 800234e:	4770      	bx	lr
  ldr r0, =_sdata
 8002350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002354:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002358:	08005760 	.word	0x08005760
  ldr r2, =_sbss
 800235c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002360:	200001b0 	.word	0x200001b0

08002364 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002364:	e7fe      	b.n	8002364 <ADC1_2_IRQHandler>
	...

08002368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <HAL_Init+0x28>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a07      	ldr	r2, [pc, #28]	; (8002390 <HAL_Init+0x28>)
 8002372:	f043 0310 	orr.w	r3, r3, #16
 8002376:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002378:	2003      	movs	r0, #3
 800237a:	f000 fd9d 	bl	8002eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800237e:	2000      	movs	r0, #0
 8002380:	f000 f808 	bl	8002394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002384:	f7ff fdfc 	bl	8001f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40022000 	.word	0x40022000

08002394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800239c:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <HAL_InitTick+0x54>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_InitTick+0x58>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	4619      	mov	r1, r3
 80023a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fdb5 	bl	8002f22 <HAL_SYSTICK_Config>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e00e      	b.n	80023e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b0f      	cmp	r3, #15
 80023c6:	d80a      	bhi.n	80023de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023c8:	2200      	movs	r2, #0
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	f04f 30ff 	mov.w	r0, #4294967295
 80023d0:	f000 fd7d 	bl	8002ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023d4:	4a06      	ldr	r2, [pc, #24]	; (80023f0 <HAL_InitTick+0x5c>)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	e000      	b.n	80023e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	2000000c 	.word	0x2000000c
 80023ec:	20000014 	.word	0x20000014
 80023f0:	20000010 	.word	0x20000010

080023f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <HAL_IncTick+0x1c>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	4b05      	ldr	r3, [pc, #20]	; (8002414 <HAL_IncTick+0x20>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4413      	add	r3, r2
 8002404:	4a03      	ldr	r2, [pc, #12]	; (8002414 <HAL_IncTick+0x20>)
 8002406:	6013      	str	r3, [r2, #0]
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	20000014 	.word	0x20000014
 8002414:	200001ac 	.word	0x200001ac

08002418 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return uwTick;
 800241c:	4b02      	ldr	r3, [pc, #8]	; (8002428 <HAL_GetTick+0x10>)
 800241e:	681b      	ldr	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr
 8002428:	200001ac 	.word	0x200001ac

0800242c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002434:	f7ff fff0 	bl	8002418 <HAL_GetTick>
 8002438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002444:	d005      	beq.n	8002452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <HAL_Delay+0x40>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4413      	add	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002452:	bf00      	nop
 8002454:	f7ff ffe0 	bl	8002418 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	429a      	cmp	r2, r3
 8002462:	d8f7      	bhi.n	8002454 <HAL_Delay+0x28>
  {
  }
}
 8002464:	bf00      	nop
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20000014 	.word	0x20000014

08002470 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e0be      	b.n	8002610 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249c:	2b00      	cmp	r3, #0
 800249e:	d109      	bne.n	80024b4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7ff fd98 	bl	8001fe4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 fbf1 	bl	8002c9c <ADC_ConversionStop_Disable>
 80024ba:	4603      	mov	r3, r0
 80024bc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f040 8099 	bne.w	80025fe <HAL_ADC_Init+0x18e>
 80024cc:	7dfb      	ldrb	r3, [r7, #23]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f040 8095 	bne.w	80025fe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024dc:	f023 0302 	bic.w	r3, r3, #2
 80024e0:	f043 0202 	orr.w	r2, r3, #2
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80024f0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	7b1b      	ldrb	r3, [r3, #12]
 80024f6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80024f8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002508:	d003      	beq.n	8002512 <HAL_ADC_Init+0xa2>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d102      	bne.n	8002518 <HAL_ADC_Init+0xa8>
 8002512:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002516:	e000      	b.n	800251a <HAL_ADC_Init+0xaa>
 8002518:	2300      	movs	r3, #0
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	7d1b      	ldrb	r3, [r3, #20]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d119      	bne.n	800255c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	7b1b      	ldrb	r3, [r3, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d109      	bne.n	8002544 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	3b01      	subs	r3, #1
 8002536:	035a      	lsls	r2, r3, #13
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	e00b      	b.n	800255c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002548:	f043 0220 	orr.w	r2, r3, #32
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	f043 0201 	orr.w	r2, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	430a      	orrs	r2, r1
 800256e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	4b28      	ldr	r3, [pc, #160]	; (8002618 <HAL_ADC_Init+0x1a8>)
 8002578:	4013      	ands	r3, r2
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	68b9      	ldr	r1, [r7, #8]
 8002580:	430b      	orrs	r3, r1
 8002582:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800258c:	d003      	beq.n	8002596 <HAL_ADC_Init+0x126>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d104      	bne.n	80025a0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	3b01      	subs	r3, #1
 800259c:	051b      	lsls	r3, r3, #20
 800259e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	4b18      	ldr	r3, [pc, #96]	; (800261c <HAL_ADC_Init+0x1ac>)
 80025bc:	4013      	ands	r3, r2
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d10b      	bne.n	80025dc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ce:	f023 0303 	bic.w	r3, r3, #3
 80025d2:	f043 0201 	orr.w	r2, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025da:	e018      	b.n	800260e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	f023 0312 	bic.w	r3, r3, #18
 80025e4:	f043 0210 	orr.w	r2, r3, #16
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	f043 0201 	orr.w	r2, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025fc:	e007      	b.n	800260e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002602:	f043 0210 	orr.w	r2, r3, #16
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800260e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3718      	adds	r7, #24
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	ffe1f7fd 	.word	0xffe1f7fd
 800261c:	ff1f0efe 	.word	0xff1f0efe

08002620 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002628:	2300      	movs	r3, #0
 800262a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_ADC_Start+0x1a>
 8002636:	2302      	movs	r3, #2
 8002638:	e098      	b.n	800276c <HAL_ADC_Start+0x14c>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fad0 	bl	8002be8 <ADC_Enable>
 8002648:	4603      	mov	r3, r0
 800264a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800264c:	7bfb      	ldrb	r3, [r7, #15]
 800264e:	2b00      	cmp	r3, #0
 8002650:	f040 8087 	bne.w	8002762 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800265c:	f023 0301 	bic.w	r3, r3, #1
 8002660:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a41      	ldr	r2, [pc, #260]	; (8002774 <HAL_ADC_Start+0x154>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d105      	bne.n	800267e <HAL_ADC_Start+0x5e>
 8002672:	4b41      	ldr	r3, [pc, #260]	; (8002778 <HAL_ADC_Start+0x158>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d115      	bne.n	80026aa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002682:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002694:	2b00      	cmp	r3, #0
 8002696:	d026      	beq.n	80026e6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026a8:	e01d      	b.n	80026e6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a2f      	ldr	r2, [pc, #188]	; (8002778 <HAL_ADC_Start+0x158>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d004      	beq.n	80026ca <HAL_ADC_Start+0xaa>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a2b      	ldr	r2, [pc, #172]	; (8002774 <HAL_ADC_Start+0x154>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d10d      	bne.n	80026e6 <HAL_ADC_Start+0xc6>
 80026ca:	4b2b      	ldr	r3, [pc, #172]	; (8002778 <HAL_ADC_Start+0x158>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d007      	beq.n	80026e6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d006      	beq.n	8002700 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	f023 0206 	bic.w	r2, r3, #6
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80026fe:	e002      	b.n	8002706 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f06f 0202 	mvn.w	r2, #2
 8002716:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002722:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002726:	d113      	bne.n	8002750 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800272c:	4a11      	ldr	r2, [pc, #68]	; (8002774 <HAL_ADC_Start+0x154>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d105      	bne.n	800273e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002732:	4b11      	ldr	r3, [pc, #68]	; (8002778 <HAL_ADC_Start+0x158>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800273a:	2b00      	cmp	r3, #0
 800273c:	d108      	bne.n	8002750 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800274c:	609a      	str	r2, [r3, #8]
 800274e:	e00c      	b.n	800276a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	e003      	b.n	800276a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800276a:	7bfb      	ldrb	r3, [r7, #15]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40012800 	.word	0x40012800
 8002778:	40012400 	.word	0x40012400

0800277c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_ADC_Stop+0x1a>
 8002792:	2302      	movs	r3, #2
 8002794:	e01a      	b.n	80027cc <HAL_ADC_Stop+0x50>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 fa7c 	bl	8002c9c <ADC_ConversionStop_Disable>
 80027a4:	4603      	mov	r3, r0
 80027a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d109      	bne.n	80027c2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027b6:	f023 0301 	bic.w	r3, r3, #1
 80027ba:	f043 0201 	orr.w	r2, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80027ea:	f7ff fe15 	bl	8002418 <HAL_GetTick>
 80027ee:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00b      	beq.n	8002816 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002802:	f043 0220 	orr.w	r2, r3, #32
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e0d3      	b.n	80029be <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d131      	bne.n	8002888 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800282e:	2b00      	cmp	r3, #0
 8002830:	d12a      	bne.n	8002888 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002832:	e021      	b.n	8002878 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283a:	d01d      	beq.n	8002878 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d007      	beq.n	8002852 <HAL_ADC_PollForConversion+0x7e>
 8002842:	f7ff fde9 	bl	8002418 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d212      	bcs.n	8002878 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10b      	bne.n	8002878 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	f043 0204 	orr.w	r2, r3, #4
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e0a2      	b.n	80029be <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0d6      	beq.n	8002834 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002886:	e070      	b.n	800296a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002888:	4b4f      	ldr	r3, [pc, #316]	; (80029c8 <HAL_ADC_PollForConversion+0x1f4>)
 800288a:	681c      	ldr	r4, [r3, #0]
 800288c:	2002      	movs	r0, #2
 800288e:	f001 fa31 	bl	8003cf4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002892:	4603      	mov	r3, r0
 8002894:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6919      	ldr	r1, [r3, #16]
 800289e:	4b4b      	ldr	r3, [pc, #300]	; (80029cc <HAL_ADC_PollForConversion+0x1f8>)
 80028a0:	400b      	ands	r3, r1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d118      	bne.n	80028d8 <HAL_ADC_PollForConversion+0x104>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68d9      	ldr	r1, [r3, #12]
 80028ac:	4b48      	ldr	r3, [pc, #288]	; (80029d0 <HAL_ADC_PollForConversion+0x1fc>)
 80028ae:	400b      	ands	r3, r1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d111      	bne.n	80028d8 <HAL_ADC_PollForConversion+0x104>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6919      	ldr	r1, [r3, #16]
 80028ba:	4b46      	ldr	r3, [pc, #280]	; (80029d4 <HAL_ADC_PollForConversion+0x200>)
 80028bc:	400b      	ands	r3, r1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d108      	bne.n	80028d4 <HAL_ADC_PollForConversion+0x100>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68d9      	ldr	r1, [r3, #12]
 80028c8:	4b43      	ldr	r3, [pc, #268]	; (80029d8 <HAL_ADC_PollForConversion+0x204>)
 80028ca:	400b      	ands	r3, r1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_ADC_PollForConversion+0x100>
 80028d0:	2314      	movs	r3, #20
 80028d2:	e020      	b.n	8002916 <HAL_ADC_PollForConversion+0x142>
 80028d4:	2329      	movs	r3, #41	; 0x29
 80028d6:	e01e      	b.n	8002916 <HAL_ADC_PollForConversion+0x142>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6919      	ldr	r1, [r3, #16]
 80028de:	4b3d      	ldr	r3, [pc, #244]	; (80029d4 <HAL_ADC_PollForConversion+0x200>)
 80028e0:	400b      	ands	r3, r1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d106      	bne.n	80028f4 <HAL_ADC_PollForConversion+0x120>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68d9      	ldr	r1, [r3, #12]
 80028ec:	4b3a      	ldr	r3, [pc, #232]	; (80029d8 <HAL_ADC_PollForConversion+0x204>)
 80028ee:	400b      	ands	r3, r1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00d      	beq.n	8002910 <HAL_ADC_PollForConversion+0x13c>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6919      	ldr	r1, [r3, #16]
 80028fa:	4b38      	ldr	r3, [pc, #224]	; (80029dc <HAL_ADC_PollForConversion+0x208>)
 80028fc:	400b      	ands	r3, r1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d108      	bne.n	8002914 <HAL_ADC_PollForConversion+0x140>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68d9      	ldr	r1, [r3, #12]
 8002908:	4b34      	ldr	r3, [pc, #208]	; (80029dc <HAL_ADC_PollForConversion+0x208>)
 800290a:	400b      	ands	r3, r1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_ADC_PollForConversion+0x140>
 8002910:	2354      	movs	r3, #84	; 0x54
 8002912:	e000      	b.n	8002916 <HAL_ADC_PollForConversion+0x142>
 8002914:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002916:	fb02 f303 	mul.w	r3, r2, r3
 800291a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800291c:	e021      	b.n	8002962 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002924:	d01a      	beq.n	800295c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d007      	beq.n	800293c <HAL_ADC_PollForConversion+0x168>
 800292c:	f7ff fd74 	bl	8002418 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d20f      	bcs.n	800295c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	429a      	cmp	r2, r3
 8002942:	d90b      	bls.n	800295c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002948:	f043 0204 	orr.w	r2, r3, #4
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e030      	b.n	80029be <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	3301      	adds	r3, #1
 8002960:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	429a      	cmp	r2, r3
 8002968:	d8d9      	bhi.n	800291e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f06f 0212 	mvn.w	r2, #18
 8002972:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002978:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800298a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800298e:	d115      	bne.n	80029bc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002994:	2b00      	cmp	r3, #0
 8002996:	d111      	bne.n	80029bc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d105      	bne.n	80029bc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b4:	f043 0201 	orr.w	r2, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	371c      	adds	r7, #28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd90      	pop	{r4, r7, pc}
 80029c6:	bf00      	nop
 80029c8:	2000000c 	.word	0x2000000c
 80029cc:	24924924 	.word	0x24924924
 80029d0:	00924924 	.word	0x00924924
 80029d4:	12492492 	.word	0x12492492
 80029d8:	00492492 	.word	0x00492492
 80029dc:	00249249 	.word	0x00249249

080029e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x20>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e0dc      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x1da>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b06      	cmp	r3, #6
 8002a26:	d81c      	bhi.n	8002a62 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	3b05      	subs	r3, #5
 8002a3a:	221f      	movs	r2, #31
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	4019      	ands	r1, r3
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	3b05      	subs	r3, #5
 8002a54:	fa00 f203 	lsl.w	r2, r0, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	635a      	str	r2, [r3, #52]	; 0x34
 8002a60:	e03c      	b.n	8002adc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b0c      	cmp	r3, #12
 8002a68:	d81c      	bhi.n	8002aa4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	3b23      	subs	r3, #35	; 0x23
 8002a7c:	221f      	movs	r2, #31
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	4019      	ands	r1, r3
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	3b23      	subs	r3, #35	; 0x23
 8002a96:	fa00 f203 	lsl.w	r2, r0, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	631a      	str	r2, [r3, #48]	; 0x30
 8002aa2:	e01b      	b.n	8002adc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3b41      	subs	r3, #65	; 0x41
 8002ab6:	221f      	movs	r2, #31
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	4019      	ands	r1, r3
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	3b41      	subs	r3, #65	; 0x41
 8002ad0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b09      	cmp	r3, #9
 8002ae2:	d91c      	bls.n	8002b1e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68d9      	ldr	r1, [r3, #12]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	4613      	mov	r3, r2
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	4413      	add	r3, r2
 8002af4:	3b1e      	subs	r3, #30
 8002af6:	2207      	movs	r2, #7
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	4019      	ands	r1, r3
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	6898      	ldr	r0, [r3, #8]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3b1e      	subs	r3, #30
 8002b10:	fa00 f203 	lsl.w	r2, r0, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	60da      	str	r2, [r3, #12]
 8002b1c:	e019      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6919      	ldr	r1, [r3, #16]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	4413      	add	r3, r2
 8002b2e:	2207      	movs	r2, #7
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	4019      	ands	r1, r3
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	6898      	ldr	r0, [r3, #8]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4613      	mov	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4413      	add	r3, r2
 8002b46:	fa00 f203 	lsl.w	r2, r0, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2b10      	cmp	r3, #16
 8002b58:	d003      	beq.n	8002b62 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b5e:	2b11      	cmp	r3, #17
 8002b60:	d132      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a1d      	ldr	r2, [pc, #116]	; (8002bdc <HAL_ADC_ConfigChannel+0x1e4>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d125      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d126      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002b88:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b10      	cmp	r3, #16
 8002b90:	d11a      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b92:	4b13      	ldr	r3, [pc, #76]	; (8002be0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a13      	ldr	r2, [pc, #76]	; (8002be4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002b98:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9c:	0c9a      	lsrs	r2, r3, #18
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ba8:	e002      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	3b01      	subs	r3, #1
 8002bae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f9      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x1b2>
 8002bb6:	e007      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbc:	f043 0220 	orr.w	r2, r3, #32
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr
 8002bdc:	40012400 	.word	0x40012400
 8002be0:	2000000c 	.word	0x2000000c
 8002be4:	431bde83 	.word	0x431bde83

08002be8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d040      	beq.n	8002c88 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 0201 	orr.w	r2, r2, #1
 8002c14:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c16:	4b1f      	ldr	r3, [pc, #124]	; (8002c94 <ADC_Enable+0xac>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a1f      	ldr	r2, [pc, #124]	; (8002c98 <ADC_Enable+0xb0>)
 8002c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c20:	0c9b      	lsrs	r3, r3, #18
 8002c22:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c24:	e002      	b.n	8002c2c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f9      	bne.n	8002c26 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c32:	f7ff fbf1 	bl	8002418 <HAL_GetTick>
 8002c36:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c38:	e01f      	b.n	8002c7a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c3a:	f7ff fbed 	bl	8002418 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d918      	bls.n	8002c7a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d011      	beq.n	8002c7a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5a:	f043 0210 	orr.w	r2, r3, #16
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c66:	f043 0201 	orr.w	r2, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e007      	b.n	8002c8a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d1d8      	bne.n	8002c3a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	2000000c 	.word	0x2000000c
 8002c98:	431bde83 	.word	0x431bde83

08002c9c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d12e      	bne.n	8002d14 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0201 	bic.w	r2, r2, #1
 8002cc4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cc6:	f7ff fba7 	bl	8002418 <HAL_GetTick>
 8002cca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ccc:	e01b      	b.n	8002d06 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cce:	f7ff fba3 	bl	8002418 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d914      	bls.n	8002d06 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d10d      	bne.n	8002d06 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cee:	f043 0210 	orr.w	r2, r3, #16
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfa:	f043 0201 	orr.w	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e007      	b.n	8002d16 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d0dc      	beq.n	8002cce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d30:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <__NVIC_SetPriorityGrouping+0x44>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d52:	4a04      	ldr	r2, [pc, #16]	; (8002d64 <__NVIC_SetPriorityGrouping+0x44>)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	60d3      	str	r3, [r2, #12]
}
 8002d58:	bf00      	nop
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d6c:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <__NVIC_GetPriorityGrouping+0x18>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	0a1b      	lsrs	r3, r3, #8
 8002d72:	f003 0307 	and.w	r3, r3, #7
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	db0b      	blt.n	8002dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	f003 021f 	and.w	r2, r3, #31
 8002d9c:	4906      	ldr	r1, [pc, #24]	; (8002db8 <__NVIC_EnableIRQ+0x34>)
 8002d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da2:	095b      	lsrs	r3, r3, #5
 8002da4:	2001      	movs	r0, #1
 8002da6:	fa00 f202 	lsl.w	r2, r0, r2
 8002daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr
 8002db8:	e000e100 	.word	0xe000e100

08002dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	6039      	str	r1, [r7, #0]
 8002dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	db0a      	blt.n	8002de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	490c      	ldr	r1, [pc, #48]	; (8002e08 <__NVIC_SetPriority+0x4c>)
 8002dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dda:	0112      	lsls	r2, r2, #4
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	440b      	add	r3, r1
 8002de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002de4:	e00a      	b.n	8002dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	4908      	ldr	r1, [pc, #32]	; (8002e0c <__NVIC_SetPriority+0x50>)
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	3b04      	subs	r3, #4
 8002df4:	0112      	lsls	r2, r2, #4
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	440b      	add	r3, r1
 8002dfa:	761a      	strb	r2, [r3, #24]
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	e000e100 	.word	0xe000e100
 8002e0c:	e000ed00 	.word	0xe000ed00

08002e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b089      	sub	sp, #36	; 0x24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f1c3 0307 	rsb	r3, r3, #7
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	bf28      	it	cs
 8002e2e:	2304      	movcs	r3, #4
 8002e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	3304      	adds	r3, #4
 8002e36:	2b06      	cmp	r3, #6
 8002e38:	d902      	bls.n	8002e40 <NVIC_EncodePriority+0x30>
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3b03      	subs	r3, #3
 8002e3e:	e000      	b.n	8002e42 <NVIC_EncodePriority+0x32>
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e44:	f04f 32ff 	mov.w	r2, #4294967295
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	43da      	mvns	r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	401a      	ands	r2, r3
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e58:	f04f 31ff 	mov.w	r1, #4294967295
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e62:	43d9      	mvns	r1, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e68:	4313      	orrs	r3, r2
         );
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3724      	adds	r7, #36	; 0x24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr

08002e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e84:	d301      	bcc.n	8002e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e86:	2301      	movs	r3, #1
 8002e88:	e00f      	b.n	8002eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e8a:	4a0a      	ldr	r2, [pc, #40]	; (8002eb4 <SysTick_Config+0x40>)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e92:	210f      	movs	r1, #15
 8002e94:	f04f 30ff 	mov.w	r0, #4294967295
 8002e98:	f7ff ff90 	bl	8002dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e9c:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <SysTick_Config+0x40>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ea2:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <SysTick_Config+0x40>)
 8002ea4:	2207      	movs	r2, #7
 8002ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	e000e010 	.word	0xe000e010

08002eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7ff ff2d 	bl	8002d20 <__NVIC_SetPriorityGrouping>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b086      	sub	sp, #24
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
 8002eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ee0:	f7ff ff42 	bl	8002d68 <__NVIC_GetPriorityGrouping>
 8002ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	68b9      	ldr	r1, [r7, #8]
 8002eea:	6978      	ldr	r0, [r7, #20]
 8002eec:	f7ff ff90 	bl	8002e10 <NVIC_EncodePriority>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff ff5f 	bl	8002dbc <__NVIC_SetPriority>
}
 8002efe:	bf00      	nop
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff ff35 	bl	8002d84 <__NVIC_EnableIRQ>
}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff ffa2 	bl	8002e74 <SysTick_Config>
 8002f30:	4603      	mov	r3, r0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d005      	beq.n	8002f5e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2204      	movs	r2, #4
 8002f56:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
 8002f5c:	e051      	b.n	8003002 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 020e 	bic.w	r2, r2, #14
 8002f6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0201 	bic.w	r2, r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a22      	ldr	r2, [pc, #136]	; (800300c <HAL_DMA_Abort_IT+0xd0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d029      	beq.n	8002fdc <HAL_DMA_Abort_IT+0xa0>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a20      	ldr	r2, [pc, #128]	; (8003010 <HAL_DMA_Abort_IT+0xd4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d022      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0x9c>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1f      	ldr	r2, [pc, #124]	; (8003014 <HAL_DMA_Abort_IT+0xd8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d01a      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x96>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1d      	ldr	r2, [pc, #116]	; (8003018 <HAL_DMA_Abort_IT+0xdc>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d012      	beq.n	8002fcc <HAL_DMA_Abort_IT+0x90>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a1c      	ldr	r2, [pc, #112]	; (800301c <HAL_DMA_Abort_IT+0xe0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d00a      	beq.n	8002fc6 <HAL_DMA_Abort_IT+0x8a>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a1a      	ldr	r2, [pc, #104]	; (8003020 <HAL_DMA_Abort_IT+0xe4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d102      	bne.n	8002fc0 <HAL_DMA_Abort_IT+0x84>
 8002fba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002fbe:	e00e      	b.n	8002fde <HAL_DMA_Abort_IT+0xa2>
 8002fc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fc4:	e00b      	b.n	8002fde <HAL_DMA_Abort_IT+0xa2>
 8002fc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fca:	e008      	b.n	8002fde <HAL_DMA_Abort_IT+0xa2>
 8002fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fd0:	e005      	b.n	8002fde <HAL_DMA_Abort_IT+0xa2>
 8002fd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fd6:	e002      	b.n	8002fde <HAL_DMA_Abort_IT+0xa2>
 8002fd8:	2310      	movs	r3, #16
 8002fda:	e000      	b.n	8002fde <HAL_DMA_Abort_IT+0xa2>
 8002fdc:	2301      	movs	r3, #1
 8002fde:	4a11      	ldr	r2, [pc, #68]	; (8003024 <HAL_DMA_Abort_IT+0xe8>)
 8002fe0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	4798      	blx	r3
    } 
  }
  return status;
 8003002:	7bfb      	ldrb	r3, [r7, #15]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40020008 	.word	0x40020008
 8003010:	4002001c 	.word	0x4002001c
 8003014:	40020030 	.word	0x40020030
 8003018:	40020044 	.word	0x40020044
 800301c:	40020058 	.word	0x40020058
 8003020:	4002006c 	.word	0x4002006c
 8003024:	40020000 	.word	0x40020000

08003028 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003028:	b480      	push	{r7}
 800302a:	b08b      	sub	sp, #44	; 0x2c
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003032:	2300      	movs	r3, #0
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003036:	2300      	movs	r3, #0
 8003038:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800303a:	e127      	b.n	800328c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800303c:	2201      	movs	r2, #1
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	69fa      	ldr	r2, [r7, #28]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	429a      	cmp	r2, r3
 8003056:	f040 8116 	bne.w	8003286 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b12      	cmp	r3, #18
 8003060:	d034      	beq.n	80030cc <HAL_GPIO_Init+0xa4>
 8003062:	2b12      	cmp	r3, #18
 8003064:	d80d      	bhi.n	8003082 <HAL_GPIO_Init+0x5a>
 8003066:	2b02      	cmp	r3, #2
 8003068:	d02b      	beq.n	80030c2 <HAL_GPIO_Init+0x9a>
 800306a:	2b02      	cmp	r3, #2
 800306c:	d804      	bhi.n	8003078 <HAL_GPIO_Init+0x50>
 800306e:	2b00      	cmp	r3, #0
 8003070:	d031      	beq.n	80030d6 <HAL_GPIO_Init+0xae>
 8003072:	2b01      	cmp	r3, #1
 8003074:	d01c      	beq.n	80030b0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003076:	e048      	b.n	800310a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003078:	2b03      	cmp	r3, #3
 800307a:	d043      	beq.n	8003104 <HAL_GPIO_Init+0xdc>
 800307c:	2b11      	cmp	r3, #17
 800307e:	d01b      	beq.n	80030b8 <HAL_GPIO_Init+0x90>
          break;
 8003080:	e043      	b.n	800310a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003082:	4a89      	ldr	r2, [pc, #548]	; (80032a8 <HAL_GPIO_Init+0x280>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d026      	beq.n	80030d6 <HAL_GPIO_Init+0xae>
 8003088:	4a87      	ldr	r2, [pc, #540]	; (80032a8 <HAL_GPIO_Init+0x280>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d806      	bhi.n	800309c <HAL_GPIO_Init+0x74>
 800308e:	4a87      	ldr	r2, [pc, #540]	; (80032ac <HAL_GPIO_Init+0x284>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d020      	beq.n	80030d6 <HAL_GPIO_Init+0xae>
 8003094:	4a86      	ldr	r2, [pc, #536]	; (80032b0 <HAL_GPIO_Init+0x288>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d01d      	beq.n	80030d6 <HAL_GPIO_Init+0xae>
          break;
 800309a:	e036      	b.n	800310a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800309c:	4a85      	ldr	r2, [pc, #532]	; (80032b4 <HAL_GPIO_Init+0x28c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d019      	beq.n	80030d6 <HAL_GPIO_Init+0xae>
 80030a2:	4a85      	ldr	r2, [pc, #532]	; (80032b8 <HAL_GPIO_Init+0x290>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d016      	beq.n	80030d6 <HAL_GPIO_Init+0xae>
 80030a8:	4a84      	ldr	r2, [pc, #528]	; (80032bc <HAL_GPIO_Init+0x294>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <HAL_GPIO_Init+0xae>
          break;
 80030ae:	e02c      	b.n	800310a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	623b      	str	r3, [r7, #32]
          break;
 80030b6:	e028      	b.n	800310a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	3304      	adds	r3, #4
 80030be:	623b      	str	r3, [r7, #32]
          break;
 80030c0:	e023      	b.n	800310a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	3308      	adds	r3, #8
 80030c8:	623b      	str	r3, [r7, #32]
          break;
 80030ca:	e01e      	b.n	800310a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	330c      	adds	r3, #12
 80030d2:	623b      	str	r3, [r7, #32]
          break;
 80030d4:	e019      	b.n	800310a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030de:	2304      	movs	r3, #4
 80030e0:	623b      	str	r3, [r7, #32]
          break;
 80030e2:	e012      	b.n	800310a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d105      	bne.n	80030f8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030ec:	2308      	movs	r3, #8
 80030ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69fa      	ldr	r2, [r7, #28]
 80030f4:	611a      	str	r2, [r3, #16]
          break;
 80030f6:	e008      	b.n	800310a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030f8:	2308      	movs	r3, #8
 80030fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	615a      	str	r2, [r3, #20]
          break;
 8003102:	e002      	b.n	800310a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003104:	2300      	movs	r3, #0
 8003106:	623b      	str	r3, [r7, #32]
          break;
 8003108:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	2bff      	cmp	r3, #255	; 0xff
 800310e:	d801      	bhi.n	8003114 <HAL_GPIO_Init+0xec>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	e001      	b.n	8003118 <HAL_GPIO_Init+0xf0>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3304      	adds	r3, #4
 8003118:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	2bff      	cmp	r3, #255	; 0xff
 800311e:	d802      	bhi.n	8003126 <HAL_GPIO_Init+0xfe>
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	e002      	b.n	800312c <HAL_GPIO_Init+0x104>
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	3b08      	subs	r3, #8
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	210f      	movs	r1, #15
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	fa01 f303 	lsl.w	r3, r1, r3
 800313a:	43db      	mvns	r3, r3
 800313c:	401a      	ands	r2, r3
 800313e:	6a39      	ldr	r1, [r7, #32]
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	fa01 f303 	lsl.w	r3, r1, r3
 8003146:	431a      	orrs	r2, r3
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 8096 	beq.w	8003286 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800315a:	4b59      	ldr	r3, [pc, #356]	; (80032c0 <HAL_GPIO_Init+0x298>)
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	4a58      	ldr	r2, [pc, #352]	; (80032c0 <HAL_GPIO_Init+0x298>)
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	6193      	str	r3, [r2, #24]
 8003166:	4b56      	ldr	r3, [pc, #344]	; (80032c0 <HAL_GPIO_Init+0x298>)
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003172:	4a54      	ldr	r2, [pc, #336]	; (80032c4 <HAL_GPIO_Init+0x29c>)
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	089b      	lsrs	r3, r3, #2
 8003178:	3302      	adds	r3, #2
 800317a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800317e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	220f      	movs	r2, #15
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4013      	ands	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a4b      	ldr	r2, [pc, #300]	; (80032c8 <HAL_GPIO_Init+0x2a0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d013      	beq.n	80031c6 <HAL_GPIO_Init+0x19e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a4a      	ldr	r2, [pc, #296]	; (80032cc <HAL_GPIO_Init+0x2a4>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00d      	beq.n	80031c2 <HAL_GPIO_Init+0x19a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a49      	ldr	r2, [pc, #292]	; (80032d0 <HAL_GPIO_Init+0x2a8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d007      	beq.n	80031be <HAL_GPIO_Init+0x196>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a48      	ldr	r2, [pc, #288]	; (80032d4 <HAL_GPIO_Init+0x2ac>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d101      	bne.n	80031ba <HAL_GPIO_Init+0x192>
 80031b6:	2303      	movs	r3, #3
 80031b8:	e006      	b.n	80031c8 <HAL_GPIO_Init+0x1a0>
 80031ba:	2304      	movs	r3, #4
 80031bc:	e004      	b.n	80031c8 <HAL_GPIO_Init+0x1a0>
 80031be:	2302      	movs	r3, #2
 80031c0:	e002      	b.n	80031c8 <HAL_GPIO_Init+0x1a0>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <HAL_GPIO_Init+0x1a0>
 80031c6:	2300      	movs	r3, #0
 80031c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ca:	f002 0203 	and.w	r2, r2, #3
 80031ce:	0092      	lsls	r2, r2, #2
 80031d0:	4093      	lsls	r3, r2
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031d8:	493a      	ldr	r1, [pc, #232]	; (80032c4 <HAL_GPIO_Init+0x29c>)
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	089b      	lsrs	r3, r3, #2
 80031de:	3302      	adds	r3, #2
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d006      	beq.n	8003200 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031f2:	4b39      	ldr	r3, [pc, #228]	; (80032d8 <HAL_GPIO_Init+0x2b0>)
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	4938      	ldr	r1, [pc, #224]	; (80032d8 <HAL_GPIO_Init+0x2b0>)
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]
 80031fe:	e006      	b.n	800320e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003200:	4b35      	ldr	r3, [pc, #212]	; (80032d8 <HAL_GPIO_Init+0x2b0>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	43db      	mvns	r3, r3
 8003208:	4933      	ldr	r1, [pc, #204]	; (80032d8 <HAL_GPIO_Init+0x2b0>)
 800320a:	4013      	ands	r3, r2
 800320c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d006      	beq.n	8003228 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800321a:	4b2f      	ldr	r3, [pc, #188]	; (80032d8 <HAL_GPIO_Init+0x2b0>)
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	492e      	ldr	r1, [pc, #184]	; (80032d8 <HAL_GPIO_Init+0x2b0>)
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	4313      	orrs	r3, r2
 8003224:	604b      	str	r3, [r1, #4]
 8003226:	e006      	b.n	8003236 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003228:	4b2b      	ldr	r3, [pc, #172]	; (80032d8 <HAL_GPIO_Init+0x2b0>)
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	43db      	mvns	r3, r3
 8003230:	4929      	ldr	r1, [pc, #164]	; (80032d8 <HAL_GPIO_Init+0x2b0>)
 8003232:	4013      	ands	r3, r2
 8003234:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d006      	beq.n	8003250 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003242:	4b25      	ldr	r3, [pc, #148]	; (80032d8 <HAL_GPIO_Init+0x2b0>)
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	4924      	ldr	r1, [pc, #144]	; (80032d8 <HAL_GPIO_Init+0x2b0>)
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	4313      	orrs	r3, r2
 800324c:	608b      	str	r3, [r1, #8]
 800324e:	e006      	b.n	800325e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003250:	4b21      	ldr	r3, [pc, #132]	; (80032d8 <HAL_GPIO_Init+0x2b0>)
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	43db      	mvns	r3, r3
 8003258:	491f      	ldr	r1, [pc, #124]	; (80032d8 <HAL_GPIO_Init+0x2b0>)
 800325a:	4013      	ands	r3, r2
 800325c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d006      	beq.n	8003278 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800326a:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <HAL_GPIO_Init+0x2b0>)
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	491a      	ldr	r1, [pc, #104]	; (80032d8 <HAL_GPIO_Init+0x2b0>)
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	4313      	orrs	r3, r2
 8003274:	60cb      	str	r3, [r1, #12]
 8003276:	e006      	b.n	8003286 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003278:	4b17      	ldr	r3, [pc, #92]	; (80032d8 <HAL_GPIO_Init+0x2b0>)
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	43db      	mvns	r3, r3
 8003280:	4915      	ldr	r1, [pc, #84]	; (80032d8 <HAL_GPIO_Init+0x2b0>)
 8003282:	4013      	ands	r3, r2
 8003284:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	3301      	adds	r3, #1
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	fa22 f303 	lsr.w	r3, r2, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	f47f aed0 	bne.w	800303c <HAL_GPIO_Init+0x14>
  }
}
 800329c:	bf00      	nop
 800329e:	372c      	adds	r7, #44	; 0x2c
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	10210000 	.word	0x10210000
 80032ac:	10110000 	.word	0x10110000
 80032b0:	10120000 	.word	0x10120000
 80032b4:	10310000 	.word	0x10310000
 80032b8:	10320000 	.word	0x10320000
 80032bc:	10220000 	.word	0x10220000
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40010000 	.word	0x40010000
 80032c8:	40010800 	.word	0x40010800
 80032cc:	40010c00 	.word	0x40010c00
 80032d0:	40011000 	.word	0x40011000
 80032d4:	40011400 	.word	0x40011400
 80032d8:	40010400 	.word	0x40010400

080032dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	460b      	mov	r3, r1
 80032e6:	807b      	strh	r3, [r7, #2]
 80032e8:	4613      	mov	r3, r2
 80032ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032ec:	787b      	ldrb	r3, [r7, #1]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032f2:	887a      	ldrh	r2, [r7, #2]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032f8:	e003      	b.n	8003302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032fa:	887b      	ldrh	r3, [r7, #2]
 80032fc:	041a      	lsls	r2, r3, #16
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	611a      	str	r2, [r3, #16]
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr

0800330c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003316:	4b08      	ldr	r3, [pc, #32]	; (8003338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003318:	695a      	ldr	r2, [r3, #20]
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	4013      	ands	r3, r2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d006      	beq.n	8003330 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003322:	4a05      	ldr	r2, [pc, #20]	; (8003338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003324:	88fb      	ldrh	r3, [r7, #6]
 8003326:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	4618      	mov	r0, r3
 800332c:	f000 f806 	bl	800333c <HAL_GPIO_EXTI_Callback>
  }
}
 8003330:	bf00      	nop
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40010400 	.word	0x40010400

0800333c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e26c      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 8087 	beq.w	800347e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003370:	4b92      	ldr	r3, [pc, #584]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 030c 	and.w	r3, r3, #12
 8003378:	2b04      	cmp	r3, #4
 800337a:	d00c      	beq.n	8003396 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800337c:	4b8f      	ldr	r3, [pc, #572]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 030c 	and.w	r3, r3, #12
 8003384:	2b08      	cmp	r3, #8
 8003386:	d112      	bne.n	80033ae <HAL_RCC_OscConfig+0x5e>
 8003388:	4b8c      	ldr	r3, [pc, #560]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003394:	d10b      	bne.n	80033ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003396:	4b89      	ldr	r3, [pc, #548]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d06c      	beq.n	800347c <HAL_RCC_OscConfig+0x12c>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d168      	bne.n	800347c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e246      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b6:	d106      	bne.n	80033c6 <HAL_RCC_OscConfig+0x76>
 80033b8:	4b80      	ldr	r3, [pc, #512]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a7f      	ldr	r2, [pc, #508]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	e02e      	b.n	8003424 <HAL_RCC_OscConfig+0xd4>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x98>
 80033ce:	4b7b      	ldr	r3, [pc, #492]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a7a      	ldr	r2, [pc, #488]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	4b78      	ldr	r3, [pc, #480]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a77      	ldr	r2, [pc, #476]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e01d      	b.n	8003424 <HAL_RCC_OscConfig+0xd4>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f0:	d10c      	bne.n	800340c <HAL_RCC_OscConfig+0xbc>
 80033f2:	4b72      	ldr	r3, [pc, #456]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a71      	ldr	r2, [pc, #452]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	4b6f      	ldr	r3, [pc, #444]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a6e      	ldr	r2, [pc, #440]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e00b      	b.n	8003424 <HAL_RCC_OscConfig+0xd4>
 800340c:	4b6b      	ldr	r3, [pc, #428]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a6a      	ldr	r2, [pc, #424]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003416:	6013      	str	r3, [r2, #0]
 8003418:	4b68      	ldr	r3, [pc, #416]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a67      	ldr	r2, [pc, #412]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 800341e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003422:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d013      	beq.n	8003454 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fe fff4 	bl	8002418 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003434:	f7fe fff0 	bl	8002418 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	; 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e1fa      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	4b5d      	ldr	r3, [pc, #372]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0xe4>
 8003452:	e014      	b.n	800347e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7fe ffe0 	bl	8002418 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800345c:	f7fe ffdc 	bl	8002418 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b64      	cmp	r3, #100	; 0x64
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e1e6      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346e:	4b53      	ldr	r3, [pc, #332]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x10c>
 800347a:	e000      	b.n	800347e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d063      	beq.n	8003552 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800348a:	4b4c      	ldr	r3, [pc, #304]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00b      	beq.n	80034ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003496:	4b49      	ldr	r3, [pc, #292]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d11c      	bne.n	80034dc <HAL_RCC_OscConfig+0x18c>
 80034a2:	4b46      	ldr	r3, [pc, #280]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d116      	bne.n	80034dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ae:	4b43      	ldr	r3, [pc, #268]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_RCC_OscConfig+0x176>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d001      	beq.n	80034c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e1ba      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c6:	4b3d      	ldr	r3, [pc, #244]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	4939      	ldr	r1, [pc, #228]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034da:	e03a      	b.n	8003552 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d020      	beq.n	8003526 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e4:	4b36      	ldr	r3, [pc, #216]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ea:	f7fe ff95 	bl	8002418 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f2:	f7fe ff91 	bl	8002418 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e19b      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003504:	4b2d      	ldr	r3, [pc, #180]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003510:	4b2a      	ldr	r3, [pc, #168]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4927      	ldr	r1, [pc, #156]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003520:	4313      	orrs	r3, r2
 8003522:	600b      	str	r3, [r1, #0]
 8003524:	e015      	b.n	8003552 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003526:	4b26      	ldr	r3, [pc, #152]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7fe ff74 	bl	8002418 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003534:	f7fe ff70 	bl	8002418 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e17a      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003546:	4b1d      	ldr	r3, [pc, #116]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d03a      	beq.n	80035d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d019      	beq.n	800359a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003566:	4b17      	ldr	r3, [pc, #92]	; (80035c4 <HAL_RCC_OscConfig+0x274>)
 8003568:	2201      	movs	r2, #1
 800356a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356c:	f7fe ff54 	bl	8002418 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003574:	f7fe ff50 	bl	8002418 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e15a      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003586:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003592:	2001      	movs	r0, #1
 8003594:	f000 fada 	bl	8003b4c <RCC_Delay>
 8003598:	e01c      	b.n	80035d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800359a:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <HAL_RCC_OscConfig+0x274>)
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a0:	f7fe ff3a 	bl	8002418 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a6:	e00f      	b.n	80035c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a8:	f7fe ff36 	bl	8002418 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d908      	bls.n	80035c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e140      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
 80035ba:	bf00      	nop
 80035bc:	40021000 	.word	0x40021000
 80035c0:	42420000 	.word	0x42420000
 80035c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c8:	4b9e      	ldr	r3, [pc, #632]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1e9      	bne.n	80035a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80a6 	beq.w	800372e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035e2:	2300      	movs	r3, #0
 80035e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035e6:	4b97      	ldr	r3, [pc, #604]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10d      	bne.n	800360e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f2:	4b94      	ldr	r3, [pc, #592]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	4a93      	ldr	r2, [pc, #588]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80035f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035fc:	61d3      	str	r3, [r2, #28]
 80035fe:	4b91      	ldr	r3, [pc, #580]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003606:	60bb      	str	r3, [r7, #8]
 8003608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800360a:	2301      	movs	r3, #1
 800360c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360e:	4b8e      	ldr	r3, [pc, #568]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003616:	2b00      	cmp	r3, #0
 8003618:	d118      	bne.n	800364c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800361a:	4b8b      	ldr	r3, [pc, #556]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a8a      	ldr	r2, [pc, #552]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 8003620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003626:	f7fe fef7 	bl	8002418 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362e:	f7fe fef3 	bl	8002418 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b64      	cmp	r3, #100	; 0x64
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e0fd      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003640:	4b81      	ldr	r3, [pc, #516]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d106      	bne.n	8003662 <HAL_RCC_OscConfig+0x312>
 8003654:	4b7b      	ldr	r3, [pc, #492]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	4a7a      	ldr	r2, [pc, #488]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	6213      	str	r3, [r2, #32]
 8003660:	e02d      	b.n	80036be <HAL_RCC_OscConfig+0x36e>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10c      	bne.n	8003684 <HAL_RCC_OscConfig+0x334>
 800366a:	4b76      	ldr	r3, [pc, #472]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	4a75      	ldr	r2, [pc, #468]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003670:	f023 0301 	bic.w	r3, r3, #1
 8003674:	6213      	str	r3, [r2, #32]
 8003676:	4b73      	ldr	r3, [pc, #460]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	4a72      	ldr	r2, [pc, #456]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 800367c:	f023 0304 	bic.w	r3, r3, #4
 8003680:	6213      	str	r3, [r2, #32]
 8003682:	e01c      	b.n	80036be <HAL_RCC_OscConfig+0x36e>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	2b05      	cmp	r3, #5
 800368a:	d10c      	bne.n	80036a6 <HAL_RCC_OscConfig+0x356>
 800368c:	4b6d      	ldr	r3, [pc, #436]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	4a6c      	ldr	r2, [pc, #432]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003692:	f043 0304 	orr.w	r3, r3, #4
 8003696:	6213      	str	r3, [r2, #32]
 8003698:	4b6a      	ldr	r3, [pc, #424]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	4a69      	ldr	r2, [pc, #420]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	6213      	str	r3, [r2, #32]
 80036a4:	e00b      	b.n	80036be <HAL_RCC_OscConfig+0x36e>
 80036a6:	4b67      	ldr	r3, [pc, #412]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	4a66      	ldr	r2, [pc, #408]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80036ac:	f023 0301 	bic.w	r3, r3, #1
 80036b0:	6213      	str	r3, [r2, #32]
 80036b2:	4b64      	ldr	r3, [pc, #400]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	4a63      	ldr	r2, [pc, #396]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80036b8:	f023 0304 	bic.w	r3, r3, #4
 80036bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d015      	beq.n	80036f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c6:	f7fe fea7 	bl	8002418 <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036cc:	e00a      	b.n	80036e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ce:	f7fe fea3 	bl	8002418 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036dc:	4293      	cmp	r3, r2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e0ab      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e4:	4b57      	ldr	r3, [pc, #348]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0ee      	beq.n	80036ce <HAL_RCC_OscConfig+0x37e>
 80036f0:	e014      	b.n	800371c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f2:	f7fe fe91 	bl	8002418 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f8:	e00a      	b.n	8003710 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fa:	f7fe fe8d 	bl	8002418 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	f241 3288 	movw	r2, #5000	; 0x1388
 8003708:	4293      	cmp	r3, r2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e095      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003710:	4b4c      	ldr	r3, [pc, #304]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1ee      	bne.n	80036fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800371c:	7dfb      	ldrb	r3, [r7, #23]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d105      	bne.n	800372e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003722:	4b48      	ldr	r3, [pc, #288]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	4a47      	ldr	r2, [pc, #284]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800372c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 8081 	beq.w	800383a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003738:	4b42      	ldr	r3, [pc, #264]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 030c 	and.w	r3, r3, #12
 8003740:	2b08      	cmp	r3, #8
 8003742:	d061      	beq.n	8003808 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	2b02      	cmp	r3, #2
 800374a:	d146      	bne.n	80037da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374c:	4b3f      	ldr	r3, [pc, #252]	; (800384c <HAL_RCC_OscConfig+0x4fc>)
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003752:	f7fe fe61 	bl	8002418 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375a:	f7fe fe5d 	bl	8002418 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e067      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800376c:	4b35      	ldr	r3, [pc, #212]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1f0      	bne.n	800375a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003780:	d108      	bne.n	8003794 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003782:	4b30      	ldr	r3, [pc, #192]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	492d      	ldr	r1, [pc, #180]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003790:	4313      	orrs	r3, r2
 8003792:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003794:	4b2b      	ldr	r3, [pc, #172]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a19      	ldr	r1, [r3, #32]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	430b      	orrs	r3, r1
 80037a6:	4927      	ldr	r1, [pc, #156]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037ac:	4b27      	ldr	r3, [pc, #156]	; (800384c <HAL_RCC_OscConfig+0x4fc>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b2:	f7fe fe31 	bl	8002418 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ba:	f7fe fe2d 	bl	8002418 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e037      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037cc:	4b1d      	ldr	r3, [pc, #116]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0f0      	beq.n	80037ba <HAL_RCC_OscConfig+0x46a>
 80037d8:	e02f      	b.n	800383a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037da:	4b1c      	ldr	r3, [pc, #112]	; (800384c <HAL_RCC_OscConfig+0x4fc>)
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e0:	f7fe fe1a 	bl	8002418 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e8:	f7fe fe16 	bl	8002418 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e020      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037fa:	4b12      	ldr	r3, [pc, #72]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f0      	bne.n	80037e8 <HAL_RCC_OscConfig+0x498>
 8003806:	e018      	b.n	800383a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e013      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_RCC_OscConfig+0x4f4>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	429a      	cmp	r2, r3
 8003826:	d106      	bne.n	8003836 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003832:	429a      	cmp	r2, r3
 8003834:	d001      	beq.n	800383a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40021000 	.word	0x40021000
 8003848:	40007000 	.word	0x40007000
 800384c:	42420060 	.word	0x42420060

08003850 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0d0      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003864:	4b6a      	ldr	r3, [pc, #424]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d910      	bls.n	8003894 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003872:	4b67      	ldr	r3, [pc, #412]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 0207 	bic.w	r2, r3, #7
 800387a:	4965      	ldr	r1, [pc, #404]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	4313      	orrs	r3, r2
 8003880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003882:	4b63      	ldr	r3, [pc, #396]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d001      	beq.n	8003894 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0b8      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d020      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038ac:	4b59      	ldr	r3, [pc, #356]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	4a58      	ldr	r2, [pc, #352]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80038b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038c4:	4b53      	ldr	r3, [pc, #332]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	4a52      	ldr	r2, [pc, #328]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80038ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d0:	4b50      	ldr	r3, [pc, #320]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	494d      	ldr	r1, [pc, #308]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d040      	beq.n	8003970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d107      	bne.n	8003906 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f6:	4b47      	ldr	r3, [pc, #284]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d115      	bne.n	800392e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e07f      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d107      	bne.n	800391e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390e:	4b41      	ldr	r3, [pc, #260]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d109      	bne.n	800392e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e073      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391e:	4b3d      	ldr	r3, [pc, #244]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e06b      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800392e:	4b39      	ldr	r3, [pc, #228]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f023 0203 	bic.w	r2, r3, #3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4936      	ldr	r1, [pc, #216]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 800393c:	4313      	orrs	r3, r2
 800393e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003940:	f7fe fd6a 	bl	8002418 <HAL_GetTick>
 8003944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	e00a      	b.n	800395e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003948:	f7fe fd66 	bl	8002418 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	f241 3288 	movw	r2, #5000	; 0x1388
 8003956:	4293      	cmp	r3, r2
 8003958:	d901      	bls.n	800395e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e053      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395e:	4b2d      	ldr	r3, [pc, #180]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f003 020c 	and.w	r2, r3, #12
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	429a      	cmp	r2, r3
 800396e:	d1eb      	bne.n	8003948 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003970:	4b27      	ldr	r3, [pc, #156]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d210      	bcs.n	80039a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397e:	4b24      	ldr	r3, [pc, #144]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f023 0207 	bic.w	r2, r3, #7
 8003986:	4922      	ldr	r1, [pc, #136]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	4313      	orrs	r3, r2
 800398c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800398e:	4b20      	ldr	r3, [pc, #128]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d001      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e032      	b.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d008      	beq.n	80039be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039ac:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	4916      	ldr	r1, [pc, #88]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d009      	beq.n	80039de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039ca:	4b12      	ldr	r3, [pc, #72]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	490e      	ldr	r1, [pc, #56]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039de:	f000 f821 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 80039e2:	4601      	mov	r1, r0
 80039e4:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	091b      	lsrs	r3, r3, #4
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	4a0a      	ldr	r2, [pc, #40]	; (8003a18 <HAL_RCC_ClockConfig+0x1c8>)
 80039f0:	5cd3      	ldrb	r3, [r2, r3]
 80039f2:	fa21 f303 	lsr.w	r3, r1, r3
 80039f6:	4a09      	ldr	r2, [pc, #36]	; (8003a1c <HAL_RCC_ClockConfig+0x1cc>)
 80039f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039fa:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <HAL_RCC_ClockConfig+0x1d0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fe fcc8 	bl	8002394 <HAL_InitTick>

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40022000 	.word	0x40022000
 8003a14:	40021000 	.word	0x40021000
 8003a18:	08005740 	.word	0x08005740
 8003a1c:	2000000c 	.word	0x2000000c
 8003a20:	20000010 	.word	0x20000010

08003a24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a24:	b490      	push	{r4, r7}
 8003a26:	b08a      	sub	sp, #40	; 0x28
 8003a28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a2a:	4b2a      	ldr	r3, [pc, #168]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a2c:	1d3c      	adds	r4, r7, #4
 8003a2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a34:	4b28      	ldr	r3, [pc, #160]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61bb      	str	r3, [r7, #24]
 8003a42:	2300      	movs	r3, #0
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a4e:	4b23      	ldr	r3, [pc, #140]	; (8003adc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d002      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x40>
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d003      	beq.n	8003a6a <HAL_RCC_GetSysClockFreq+0x46>
 8003a62:	e02d      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a64:	4b1e      	ldr	r3, [pc, #120]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a66:	623b      	str	r3, [r7, #32]
      break;
 8003a68:	e02d      	b.n	8003ac6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	0c9b      	lsrs	r3, r3, #18
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a76:	4413      	add	r3, r2
 8003a78:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a7c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d013      	beq.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a88:	4b14      	ldr	r3, [pc, #80]	; (8003adc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	0c5b      	lsrs	r3, r3, #17
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a96:	4413      	add	r3, r2
 8003a98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a9c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	4a0f      	ldr	r2, [pc, #60]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003aa2:	fb02 f203 	mul.w	r2, r2, r3
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
 8003aae:	e004      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	4a0c      	ldr	r2, [pc, #48]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ab4:	fb02 f303 	mul.w	r3, r2, r3
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	623b      	str	r3, [r7, #32]
      break;
 8003abe:	e002      	b.n	8003ac6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ac0:	4b07      	ldr	r3, [pc, #28]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ac2:	623b      	str	r3, [r7, #32]
      break;
 8003ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3728      	adds	r7, #40	; 0x28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc90      	pop	{r4, r7}
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	08005718 	.word	0x08005718
 8003ad8:	08005728 	.word	0x08005728
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	007a1200 	.word	0x007a1200
 8003ae4:	003d0900 	.word	0x003d0900

08003ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aec:	4b02      	ldr	r3, [pc, #8]	; (8003af8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003aee:	681b      	ldr	r3, [r3, #0]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr
 8003af8:	2000000c 	.word	0x2000000c

08003afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b00:	f7ff fff2 	bl	8003ae8 <HAL_RCC_GetHCLKFreq>
 8003b04:	4601      	mov	r1, r0
 8003b06:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	0a1b      	lsrs	r3, r3, #8
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	4a03      	ldr	r2, [pc, #12]	; (8003b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b12:	5cd3      	ldrb	r3, [r2, r3]
 8003b14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	08005750 	.word	0x08005750

08003b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b28:	f7ff ffde 	bl	8003ae8 <HAL_RCC_GetHCLKFreq>
 8003b2c:	4601      	mov	r1, r0
 8003b2e:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	0adb      	lsrs	r3, r3, #11
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	4a03      	ldr	r2, [pc, #12]	; (8003b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b3a:	5cd3      	ldrb	r3, [r2, r3]
 8003b3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40021000 	.word	0x40021000
 8003b48:	08005750 	.word	0x08005750

08003b4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b54:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <RCC_Delay+0x34>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a0a      	ldr	r2, [pc, #40]	; (8003b84 <RCC_Delay+0x38>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	0a5b      	lsrs	r3, r3, #9
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	fb02 f303 	mul.w	r3, r2, r3
 8003b66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b68:	bf00      	nop
  }
  while (Delay --);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1e5a      	subs	r2, r3, #1
 8003b6e:	60fa      	str	r2, [r7, #12]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1f9      	bne.n	8003b68 <RCC_Delay+0x1c>
}
 8003b74:	bf00      	nop
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc80      	pop	{r7}
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	2000000c 	.word	0x2000000c
 8003b84:	10624dd3 	.word	0x10624dd3

08003b88 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	613b      	str	r3, [r7, #16]
 8003b94:	2300      	movs	r3, #0
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d07d      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ba8:	4b4f      	ldr	r3, [pc, #316]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10d      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bb4:	4b4c      	ldr	r3, [pc, #304]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	4a4b      	ldr	r2, [pc, #300]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bbe:	61d3      	str	r3, [r2, #28]
 8003bc0:	4b49      	ldr	r3, [pc, #292]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd0:	4b46      	ldr	r3, [pc, #280]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d118      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bdc:	4b43      	ldr	r3, [pc, #268]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a42      	ldr	r2, [pc, #264]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003be8:	f7fe fc16 	bl	8002418 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bee:	e008      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf0:	f7fe fc12 	bl	8002418 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b64      	cmp	r3, #100	; 0x64
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e06d      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c02:	4b3a      	ldr	r3, [pc, #232]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0f0      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c0e:	4b36      	ldr	r3, [pc, #216]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c16:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d02e      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d027      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c2c:	4b2e      	ldr	r3, [pc, #184]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c34:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c36:	4b2e      	ldr	r3, [pc, #184]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c38:	2201      	movs	r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c3c:	4b2c      	ldr	r3, [pc, #176]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c42:	4a29      	ldr	r2, [pc, #164]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d014      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c52:	f7fe fbe1 	bl	8002418 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c58:	e00a      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c5a:	f7fe fbdd 	bl	8002418 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e036      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c70:	4b1d      	ldr	r3, [pc, #116]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0ee      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	4917      	ldr	r1, [pc, #92]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c8e:	7dfb      	ldrb	r3, [r7, #23]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d105      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c94:	4b14      	ldr	r3, [pc, #80]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	4a13      	ldr	r2, [pc, #76]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d008      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cac:	4b0e      	ldr	r3, [pc, #56]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	490b      	ldr	r1, [pc, #44]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0310 	and.w	r3, r3, #16
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d008      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cca:	4b07      	ldr	r3, [pc, #28]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	4904      	ldr	r1, [pc, #16]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	40007000 	.word	0x40007000
 8003cf0:	42420440 	.word	0x42420440

08003cf4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003cf4:	b590      	push	{r4, r7, lr}
 8003cf6:	b08d      	sub	sp, #52	; 0x34
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003cfc:	4b55      	ldr	r3, [pc, #340]	; (8003e54 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003cfe:	f107 040c 	add.w	r4, r7, #12
 8003d02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d08:	4b53      	ldr	r3, [pc, #332]	; (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
 8003d12:	2300      	movs	r3, #0
 8003d14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d16:	2300      	movs	r3, #0
 8003d18:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d07f      	beq.n	8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003d28:	2b10      	cmp	r3, #16
 8003d2a:	d002      	beq.n	8003d32 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d048      	beq.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003d30:	e08b      	b.n	8003e4a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003d32:	4b4a      	ldr	r3, [pc, #296]	; (8003e5c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003d38:	4b48      	ldr	r3, [pc, #288]	; (8003e5c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d07f      	beq.n	8003e44 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	0c9b      	lsrs	r3, r3, #18
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003d50:	4413      	add	r3, r2
 8003d52:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d56:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d018      	beq.n	8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d62:	4b3e      	ldr	r3, [pc, #248]	; (8003e5c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	0c5b      	lsrs	r3, r3, #17
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003d70:	4413      	add	r3, r2
 8003d72:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d76:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00d      	beq.n	8003d9e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003d82:	4a37      	ldr	r2, [pc, #220]	; (8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	fb02 f303 	mul.w	r3, r2, r3
 8003d90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d92:	e004      	b.n	8003d9e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d94:	6a3b      	ldr	r3, [r7, #32]
 8003d96:	4a33      	ldr	r2, [pc, #204]	; (8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003d98:	fb02 f303 	mul.w	r3, r2, r3
 8003d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003d9e:	4b2f      	ldr	r3, [pc, #188]	; (8003e5c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003daa:	d102      	bne.n	8003db2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dae:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003db0:	e048      	b.n	8003e44 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	4a2c      	ldr	r2, [pc, #176]	; (8003e68 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003db8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbc:	085b      	lsrs	r3, r3, #1
 8003dbe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003dc0:	e040      	b.n	8003e44 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003dc2:	4b26      	ldr	r3, [pc, #152]	; (8003e5c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dd2:	d108      	bne.n	8003de6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003de2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003de4:	e01f      	b.n	8003e26 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003df0:	d109      	bne.n	8003e06 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003df2:	4b1a      	ldr	r3, [pc, #104]	; (8003e5c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003dfe:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003e02:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e04:	e00f      	b.n	8003e26 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e10:	d11a      	bne.n	8003e48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003e12:	4b12      	ldr	r3, [pc, #72]	; (8003e5c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d014      	beq.n	8003e48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003e1e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003e22:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e24:	e010      	b.n	8003e48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003e26:	e00f      	b.n	8003e48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003e28:	f7ff fe7c 	bl	8003b24 <HAL_RCC_GetPCLK2Freq>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	0b9b      	lsrs	r3, r3, #14
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	3301      	adds	r3, #1
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e40:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e42:	e002      	b.n	8003e4a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003e44:	bf00      	nop
 8003e46:	e000      	b.n	8003e4a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003e48:	bf00      	nop
    }
  }
  return (frequency);
 8003e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3734      	adds	r7, #52	; 0x34
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd90      	pop	{r4, r7, pc}
 8003e54:	0800572c 	.word	0x0800572c
 8003e58:	0800573c 	.word	0x0800573c
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	007a1200 	.word	0x007a1200
 8003e64:	003d0900 	.word	0x003d0900
 8003e68:	aaaaaaab 	.word	0xaaaaaaab

08003e6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e076      	b.n	8003f6c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d108      	bne.n	8003e98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e8e:	d009      	beq.n	8003ea4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	61da      	str	r2, [r3, #28]
 8003e96:	e005      	b.n	8003ea4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d106      	bne.n	8003ec4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7fe f8e4 	bl	800208c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003eec:	431a      	orrs	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f28:	ea42 0103 	orr.w	r1, r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	0c1a      	lsrs	r2, r3, #16
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f002 0204 	and.w	r2, r2, #4
 8003f4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	69da      	ldr	r2, [r3, #28]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b088      	sub	sp, #32
 8003f78:	af02      	add	r7, sp, #8
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	603b      	str	r3, [r7, #0]
 8003f80:	4613      	mov	r3, r2
 8003f82:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f84:	2300      	movs	r3, #0
 8003f86:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f90:	d112      	bne.n	8003fb8 <HAL_SPI_Receive+0x44>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10e      	bne.n	8003fb8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2204      	movs	r2, #4
 8003f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003fa2:	88fa      	ldrh	r2, [r7, #6]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	68b9      	ldr	r1, [r7, #8]
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 f8f1 	bl	8004196 <HAL_SPI_TransmitReceive>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	e0ea      	b.n	800418e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_SPI_Receive+0x52>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e0e3      	b.n	800418e <HAL_SPI_Receive+0x21a>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fce:	f7fe fa23 	bl	8002418 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d002      	beq.n	8003fe6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fe4:	e0ca      	b.n	800417c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d002      	beq.n	8003ff2 <HAL_SPI_Receive+0x7e>
 8003fec:	88fb      	ldrh	r3, [r7, #6]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d102      	bne.n	8003ff8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ff6:	e0c1      	b.n	800417c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2204      	movs	r2, #4
 8003ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	88fa      	ldrh	r2, [r7, #6]
 8004010:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	88fa      	ldrh	r2, [r7, #6]
 8004016:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800403e:	d10f      	bne.n	8004060 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800404e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800405e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406a:	2b40      	cmp	r3, #64	; 0x40
 800406c:	d007      	beq.n	800407e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800407c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d162      	bne.n	800414c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004086:	e02e      	b.n	80040e6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b01      	cmp	r3, #1
 8004094:	d115      	bne.n	80040c2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f103 020c 	add.w	r2, r3, #12
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a2:	7812      	ldrb	r2, [r2, #0]
 80040a4:	b2d2      	uxtb	r2, r2
 80040a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040c0:	e011      	b.n	80040e6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040c2:	f7fe f9a9 	bl	8002418 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d803      	bhi.n	80040da <HAL_SPI_Receive+0x166>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d8:	d102      	bne.n	80040e0 <HAL_SPI_Receive+0x16c>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d102      	bne.n	80040e6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80040e4:	e04a      	b.n	800417c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1cb      	bne.n	8004088 <HAL_SPI_Receive+0x114>
 80040f0:	e031      	b.n	8004156 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d113      	bne.n	8004128 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410a:	b292      	uxth	r2, r2
 800410c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004112:	1c9a      	adds	r2, r3, #2
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800411c:	b29b      	uxth	r3, r3
 800411e:	3b01      	subs	r3, #1
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004126:	e011      	b.n	800414c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004128:	f7fe f976 	bl	8002418 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d803      	bhi.n	8004140 <HAL_SPI_Receive+0x1cc>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413e:	d102      	bne.n	8004146 <HAL_SPI_Receive+0x1d2>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d102      	bne.n	800414c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	75fb      	strb	r3, [r7, #23]
          goto error;
 800414a:	e017      	b.n	800417c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1cd      	bne.n	80040f2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	6839      	ldr	r1, [r7, #0]
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 fb4c 	bl	80047f8 <SPI_EndRxTransaction>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2220      	movs	r2, #32
 800416a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004170:	2b00      	cmp	r3, #0
 8004172:	d002      	beq.n	800417a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	75fb      	strb	r3, [r7, #23]
 8004178:	e000      	b.n	800417c <HAL_SPI_Receive+0x208>
  }

error :
 800417a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800418c:	7dfb      	ldrb	r3, [r7, #23]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b08c      	sub	sp, #48	; 0x30
 800419a:	af00      	add	r7, sp, #0
 800419c:	60f8      	str	r0, [r7, #12]
 800419e:	60b9      	str	r1, [r7, #8]
 80041a0:	607a      	str	r2, [r7, #4]
 80041a2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80041a4:	2301      	movs	r3, #1
 80041a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <HAL_SPI_TransmitReceive+0x26>
 80041b8:	2302      	movs	r3, #2
 80041ba:	e18a      	b.n	80044d2 <HAL_SPI_TransmitReceive+0x33c>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041c4:	f7fe f928 	bl	8002418 <HAL_GetTick>
 80041c8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80041da:	887b      	ldrh	r3, [r7, #2]
 80041dc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d00f      	beq.n	8004206 <HAL_SPI_TransmitReceive+0x70>
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ec:	d107      	bne.n	80041fe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d103      	bne.n	80041fe <HAL_SPI_TransmitReceive+0x68>
 80041f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d003      	beq.n	8004206 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80041fe:	2302      	movs	r3, #2
 8004200:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004204:	e15b      	b.n	80044be <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <HAL_SPI_TransmitReceive+0x82>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <HAL_SPI_TransmitReceive+0x82>
 8004212:	887b      	ldrh	r3, [r7, #2]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d103      	bne.n	8004220 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800421e:	e14e      	b.n	80044be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b04      	cmp	r3, #4
 800422a:	d003      	beq.n	8004234 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2205      	movs	r2, #5
 8004230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	887a      	ldrh	r2, [r7, #2]
 8004244:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	887a      	ldrh	r2, [r7, #2]
 800424a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	887a      	ldrh	r2, [r7, #2]
 8004256:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	887a      	ldrh	r2, [r7, #2]
 800425c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004274:	2b40      	cmp	r3, #64	; 0x40
 8004276:	d007      	beq.n	8004288 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004286:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004290:	d178      	bne.n	8004384 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <HAL_SPI_TransmitReceive+0x10a>
 800429a:	8b7b      	ldrh	r3, [r7, #26]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d166      	bne.n	800436e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a4:	881a      	ldrh	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	1c9a      	adds	r2, r3, #2
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042c4:	e053      	b.n	800436e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d11b      	bne.n	800430c <HAL_SPI_TransmitReceive+0x176>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d016      	beq.n	800430c <HAL_SPI_TransmitReceive+0x176>
 80042de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d113      	bne.n	800430c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e8:	881a      	ldrh	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f4:	1c9a      	adds	r2, r3, #2
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b01      	cmp	r3, #1
 8004318:	d119      	bne.n	800434e <HAL_SPI_TransmitReceive+0x1b8>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800431e:	b29b      	uxth	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d014      	beq.n	800434e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432e:	b292      	uxth	r2, r2
 8004330:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004336:	1c9a      	adds	r2, r3, #2
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004340:	b29b      	uxth	r3, r3
 8004342:	3b01      	subs	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800434a:	2301      	movs	r3, #1
 800434c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800434e:	f7fe f863 	bl	8002418 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800435a:	429a      	cmp	r2, r3
 800435c:	d807      	bhi.n	800436e <HAL_SPI_TransmitReceive+0x1d8>
 800435e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004364:	d003      	beq.n	800436e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800436c:	e0a7      	b.n	80044be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004372:	b29b      	uxth	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1a6      	bne.n	80042c6 <HAL_SPI_TransmitReceive+0x130>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800437c:	b29b      	uxth	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1a1      	bne.n	80042c6 <HAL_SPI_TransmitReceive+0x130>
 8004382:	e07c      	b.n	800447e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <HAL_SPI_TransmitReceive+0x1fc>
 800438c:	8b7b      	ldrh	r3, [r7, #26]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d16b      	bne.n	800446a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	330c      	adds	r3, #12
 800439c:	7812      	ldrb	r2, [r2, #0]
 800439e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a4:	1c5a      	adds	r2, r3, #1
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043b8:	e057      	b.n	800446a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d11c      	bne.n	8004402 <HAL_SPI_TransmitReceive+0x26c>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d017      	beq.n	8004402 <HAL_SPI_TransmitReceive+0x26c>
 80043d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d114      	bne.n	8004402 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	330c      	adds	r3, #12
 80043e2:	7812      	ldrb	r2, [r2, #0]
 80043e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043fe:	2300      	movs	r3, #0
 8004400:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b01      	cmp	r3, #1
 800440e:	d119      	bne.n	8004444 <HAL_SPI_TransmitReceive+0x2ae>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d014      	beq.n	8004444 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004436:	b29b      	uxth	r3, r3
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004440:	2301      	movs	r3, #1
 8004442:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004444:	f7fd ffe8 	bl	8002418 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004450:	429a      	cmp	r2, r3
 8004452:	d803      	bhi.n	800445c <HAL_SPI_TransmitReceive+0x2c6>
 8004454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445a:	d102      	bne.n	8004462 <HAL_SPI_TransmitReceive+0x2cc>
 800445c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445e:	2b00      	cmp	r3, #0
 8004460:	d103      	bne.n	800446a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004468:	e029      	b.n	80044be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800446e:	b29b      	uxth	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1a2      	bne.n	80043ba <HAL_SPI_TransmitReceive+0x224>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d19d      	bne.n	80043ba <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800447e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004480:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 fa0a 	bl	800489c <SPI_EndRxTxTransaction>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d006      	beq.n	800449c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2220      	movs	r2, #32
 8004498:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800449a:	e010      	b.n	80044be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10b      	bne.n	80044bc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	e000      	b.n	80044be <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80044bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3730      	adds	r7, #48	; 0x30
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
	...

080044dc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b088      	sub	sp, #32
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	099b      	lsrs	r3, r3, #6
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10f      	bne.n	8004520 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00a      	beq.n	8004520 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	099b      	lsrs	r3, r3, #6
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d004      	beq.n	8004520 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	4798      	blx	r3
    return;
 800451e:	e0bf      	b.n	80046a0 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	085b      	lsrs	r3, r3, #1
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00a      	beq.n	8004542 <HAL_SPI_IRQHandler+0x66>
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	09db      	lsrs	r3, r3, #7
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	d004      	beq.n	8004542 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	4798      	blx	r3
    return;
 8004540:	e0ae      	b.n	80046a0 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	095b      	lsrs	r3, r3, #5
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <HAL_SPI_IRQHandler+0x80>
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	099b      	lsrs	r3, r3, #6
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 80a2 	beq.w	80046a0 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	095b      	lsrs	r3, r3, #5
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 809b 	beq.w	80046a0 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	099b      	lsrs	r3, r3, #6
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d023      	beq.n	80045be <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b03      	cmp	r3, #3
 8004580:	d011      	beq.n	80045a6 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004586:	f043 0204 	orr.w	r2, r3, #4
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800458e:	2300      	movs	r3, #0
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	617b      	str	r3, [r7, #20]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	617b      	str	r3, [r7, #20]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	e00b      	b.n	80045be <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045a6:	2300      	movs	r3, #0
 80045a8:	613b      	str	r3, [r7, #16]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	613b      	str	r3, [r7, #16]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	613b      	str	r3, [r7, #16]
 80045ba:	693b      	ldr	r3, [r7, #16]
        return;
 80045bc:	e070      	b.n	80046a0 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	095b      	lsrs	r3, r3, #5
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d014      	beq.n	80045f4 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ce:	f043 0201 	orr.w	r2, r3, #1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d050      	beq.n	800469e <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800460a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d104      	bne.n	8004628 <HAL_SPI_IRQHandler+0x14c>
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d034      	beq.n	8004692 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0203 	bic.w	r2, r2, #3
 8004636:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463c:	2b00      	cmp	r3, #0
 800463e:	d011      	beq.n	8004664 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004644:	4a18      	ldr	r2, [pc, #96]	; (80046a8 <HAL_SPI_IRQHandler+0x1cc>)
 8004646:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800464c:	4618      	mov	r0, r3
 800464e:	f7fe fc75 	bl	8002f3c <HAL_DMA_Abort_IT>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004668:	2b00      	cmp	r3, #0
 800466a:	d016      	beq.n	800469a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004670:	4a0d      	ldr	r2, [pc, #52]	; (80046a8 <HAL_SPI_IRQHandler+0x1cc>)
 8004672:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004678:	4618      	mov	r0, r3
 800467a:	f7fe fc5f 	bl	8002f3c <HAL_DMA_Abort_IT>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00a      	beq.n	800469a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004688:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004690:	e003      	b.n	800469a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f80a 	bl	80046ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004698:	e000      	b.n	800469c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800469a:	bf00      	nop
    return;
 800469c:	bf00      	nop
 800469e:	bf00      	nop
  }
}
 80046a0:	3720      	adds	r7, #32
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	080046bf 	.word	0x080046bf

080046ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr

080046be <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b084      	sub	sp, #16
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f7ff ffe7 	bl	80046ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80046de:	bf00      	nop
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	603b      	str	r3, [r7, #0]
 80046f4:	4613      	mov	r3, r2
 80046f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046f8:	f7fd fe8e 	bl	8002418 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004700:	1a9b      	subs	r3, r3, r2
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	4413      	add	r3, r2
 8004706:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004708:	f7fd fe86 	bl	8002418 <HAL_GetTick>
 800470c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800470e:	4b39      	ldr	r3, [pc, #228]	; (80047f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	015b      	lsls	r3, r3, #5
 8004714:	0d1b      	lsrs	r3, r3, #20
 8004716:	69fa      	ldr	r2, [r7, #28]
 8004718:	fb02 f303 	mul.w	r3, r2, r3
 800471c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800471e:	e054      	b.n	80047ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004726:	d050      	beq.n	80047ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004728:	f7fd fe76 	bl	8002418 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	69fa      	ldr	r2, [r7, #28]
 8004734:	429a      	cmp	r2, r3
 8004736:	d902      	bls.n	800473e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d13d      	bne.n	80047ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800474c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004756:	d111      	bne.n	800477c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004760:	d004      	beq.n	800476c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800476a:	d107      	bne.n	800477c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800477a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004784:	d10f      	bne.n	80047a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e017      	b.n	80047ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	4013      	ands	r3, r2
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	bf0c      	ite	eq
 80047da:	2301      	moveq	r3, #1
 80047dc:	2300      	movne	r3, #0
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	461a      	mov	r2, r3
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d19b      	bne.n	8004720 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3720      	adds	r7, #32
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	2000000c 	.word	0x2000000c

080047f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af02      	add	r7, sp, #8
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800480c:	d111      	bne.n	8004832 <SPI_EndRxTransaction+0x3a>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004816:	d004      	beq.n	8004822 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004820:	d107      	bne.n	8004832 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004830:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800483a:	d117      	bne.n	800486c <SPI_EndRxTransaction+0x74>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004844:	d112      	bne.n	800486c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2200      	movs	r2, #0
 800484e:	2101      	movs	r1, #1
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f7ff ff49 	bl	80046e8 <SPI_WaitFlagStateUntilTimeout>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d01a      	beq.n	8004892 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004860:	f043 0220 	orr.w	r2, r3, #32
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e013      	b.n	8004894 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	2200      	movs	r2, #0
 8004874:	2180      	movs	r1, #128	; 0x80
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f7ff ff36 	bl	80046e8 <SPI_WaitFlagStateUntilTimeout>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d007      	beq.n	8004892 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004886:	f043 0220 	orr.w	r2, r3, #32
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e000      	b.n	8004894 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2200      	movs	r2, #0
 80048b0:	2180      	movs	r1, #128	; 0x80
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f7ff ff18 	bl	80046e8 <SPI_WaitFlagStateUntilTimeout>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d007      	beq.n	80048ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c2:	f043 0220 	orr.w	r2, r3, #32
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e000      	b.n	80048d0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e041      	b.n	800496e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d106      	bne.n	8004904 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7fd fc26 	bl	8002150 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3304      	adds	r3, #4
 8004914:	4619      	mov	r1, r3
 8004916:	4610      	mov	r0, r2
 8004918:	f000 fae8 	bl	8004eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b01      	cmp	r3, #1
 800498a:	d001      	beq.n	8004990 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e032      	b.n	80049f6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2202      	movs	r2, #2
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a18      	ldr	r2, [pc, #96]	; (8004a00 <HAL_TIM_Base_Start+0x88>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d00e      	beq.n	80049c0 <HAL_TIM_Base_Start+0x48>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049aa:	d009      	beq.n	80049c0 <HAL_TIM_Base_Start+0x48>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a14      	ldr	r2, [pc, #80]	; (8004a04 <HAL_TIM_Base_Start+0x8c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d004      	beq.n	80049c0 <HAL_TIM_Base_Start+0x48>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a13      	ldr	r2, [pc, #76]	; (8004a08 <HAL_TIM_Base_Start+0x90>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d111      	bne.n	80049e4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2b06      	cmp	r3, #6
 80049d0:	d010      	beq.n	80049f4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 0201 	orr.w	r2, r2, #1
 80049e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e2:	e007      	b.n	80049f4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0201 	orr.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bc80      	pop	{r7}
 80049fe:	4770      	bx	lr
 8004a00:	40012c00 	.word	0x40012c00
 8004a04:	40000400 	.word	0x40000400
 8004a08:	40000800 	.word	0x40000800

08004a0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e041      	b.n	8004aa2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d106      	bne.n	8004a38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f839 	bl	8004aaa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3304      	adds	r3, #4
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	f000 fa4e 	bl	8004eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr

08004abc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d109      	bne.n	8004ae0 <HAL_TIM_PWM_Start+0x24>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	bf14      	ite	ne
 8004ad8:	2301      	movne	r3, #1
 8004ada:	2300      	moveq	r3, #0
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	e022      	b.n	8004b26 <HAL_TIM_PWM_Start+0x6a>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d109      	bne.n	8004afa <HAL_TIM_PWM_Start+0x3e>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	bf14      	ite	ne
 8004af2:	2301      	movne	r3, #1
 8004af4:	2300      	moveq	r3, #0
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	e015      	b.n	8004b26 <HAL_TIM_PWM_Start+0x6a>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d109      	bne.n	8004b14 <HAL_TIM_PWM_Start+0x58>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	bf14      	ite	ne
 8004b0c:	2301      	movne	r3, #1
 8004b0e:	2300      	moveq	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	e008      	b.n	8004b26 <HAL_TIM_PWM_Start+0x6a>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	bf14      	ite	ne
 8004b20:	2301      	movne	r3, #1
 8004b22:	2300      	moveq	r3, #0
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e05e      	b.n	8004bec <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d104      	bne.n	8004b3e <HAL_TIM_PWM_Start+0x82>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b3c:	e013      	b.n	8004b66 <HAL_TIM_PWM_Start+0xaa>
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2b04      	cmp	r3, #4
 8004b42:	d104      	bne.n	8004b4e <HAL_TIM_PWM_Start+0x92>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b4c:	e00b      	b.n	8004b66 <HAL_TIM_PWM_Start+0xaa>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d104      	bne.n	8004b5e <HAL_TIM_PWM_Start+0xa2>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b5c:	e003      	b.n	8004b66 <HAL_TIM_PWM_Start+0xaa>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2202      	movs	r2, #2
 8004b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	6839      	ldr	r1, [r7, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fc3c 	bl	80053ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a1e      	ldr	r2, [pc, #120]	; (8004bf4 <HAL_TIM_PWM_Start+0x138>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d107      	bne.n	8004b8e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a18      	ldr	r2, [pc, #96]	; (8004bf4 <HAL_TIM_PWM_Start+0x138>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00e      	beq.n	8004bb6 <HAL_TIM_PWM_Start+0xfa>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba0:	d009      	beq.n	8004bb6 <HAL_TIM_PWM_Start+0xfa>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a14      	ldr	r2, [pc, #80]	; (8004bf8 <HAL_TIM_PWM_Start+0x13c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d004      	beq.n	8004bb6 <HAL_TIM_PWM_Start+0xfa>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a12      	ldr	r2, [pc, #72]	; (8004bfc <HAL_TIM_PWM_Start+0x140>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d111      	bne.n	8004bda <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2b06      	cmp	r3, #6
 8004bc6:	d010      	beq.n	8004bea <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0201 	orr.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd8:	e007      	b.n	8004bea <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f042 0201 	orr.w	r2, r2, #1
 8004be8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	40012c00 	.word	0x40012c00
 8004bf8:	40000400 	.word	0x40000400
 8004bfc:	40000800 	.word	0x40000800

08004c00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d101      	bne.n	8004c1a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004c16:	2302      	movs	r3, #2
 8004c18:	e0ac      	b.n	8004d74 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b0c      	cmp	r3, #12
 8004c26:	f200 809f 	bhi.w	8004d68 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004c2a:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c30:	08004c65 	.word	0x08004c65
 8004c34:	08004d69 	.word	0x08004d69
 8004c38:	08004d69 	.word	0x08004d69
 8004c3c:	08004d69 	.word	0x08004d69
 8004c40:	08004ca5 	.word	0x08004ca5
 8004c44:	08004d69 	.word	0x08004d69
 8004c48:	08004d69 	.word	0x08004d69
 8004c4c:	08004d69 	.word	0x08004d69
 8004c50:	08004ce7 	.word	0x08004ce7
 8004c54:	08004d69 	.word	0x08004d69
 8004c58:	08004d69 	.word	0x08004d69
 8004c5c:	08004d69 	.word	0x08004d69
 8004c60:	08004d27 	.word	0x08004d27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68b9      	ldr	r1, [r7, #8]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 f9a0 	bl	8004fb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699a      	ldr	r2, [r3, #24]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0208 	orr.w	r2, r2, #8
 8004c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	699a      	ldr	r2, [r3, #24]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0204 	bic.w	r2, r2, #4
 8004c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6999      	ldr	r1, [r3, #24]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	691a      	ldr	r2, [r3, #16]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	619a      	str	r2, [r3, #24]
      break;
 8004ca2:	e062      	b.n	8004d6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 f9e6 	bl	800507c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699a      	ldr	r2, [r3, #24]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6999      	ldr	r1, [r3, #24]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	021a      	lsls	r2, r3, #8
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	619a      	str	r2, [r3, #24]
      break;
 8004ce4:	e041      	b.n	8004d6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 fa2f 	bl	8005150 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f042 0208 	orr.w	r2, r2, #8
 8004d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69da      	ldr	r2, [r3, #28]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0204 	bic.w	r2, r2, #4
 8004d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69d9      	ldr	r1, [r3, #28]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	61da      	str	r2, [r3, #28]
      break;
 8004d24:	e021      	b.n	8004d6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 fa79 	bl	8005224 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69da      	ldr	r2, [r3, #28]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69da      	ldr	r2, [r3, #28]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69d9      	ldr	r1, [r3, #28]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	021a      	lsls	r2, r3, #8
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	61da      	str	r2, [r3, #28]
      break;
 8004d66:	e000      	b.n	8004d6a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004d68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_TIM_ConfigClockSource+0x18>
 8004d90:	2302      	movs	r3, #2
 8004d92:	e0a6      	b.n	8004ee2 <HAL_TIM_ConfigClockSource+0x166>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004db2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2b40      	cmp	r3, #64	; 0x40
 8004dca:	d067      	beq.n	8004e9c <HAL_TIM_ConfigClockSource+0x120>
 8004dcc:	2b40      	cmp	r3, #64	; 0x40
 8004dce:	d80b      	bhi.n	8004de8 <HAL_TIM_ConfigClockSource+0x6c>
 8004dd0:	2b10      	cmp	r3, #16
 8004dd2:	d073      	beq.n	8004ebc <HAL_TIM_ConfigClockSource+0x140>
 8004dd4:	2b10      	cmp	r3, #16
 8004dd6:	d802      	bhi.n	8004dde <HAL_TIM_ConfigClockSource+0x62>
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d06f      	beq.n	8004ebc <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004ddc:	e078      	b.n	8004ed0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004dde:	2b20      	cmp	r3, #32
 8004de0:	d06c      	beq.n	8004ebc <HAL_TIM_ConfigClockSource+0x140>
 8004de2:	2b30      	cmp	r3, #48	; 0x30
 8004de4:	d06a      	beq.n	8004ebc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004de6:	e073      	b.n	8004ed0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004de8:	2b70      	cmp	r3, #112	; 0x70
 8004dea:	d00d      	beq.n	8004e08 <HAL_TIM_ConfigClockSource+0x8c>
 8004dec:	2b70      	cmp	r3, #112	; 0x70
 8004dee:	d804      	bhi.n	8004dfa <HAL_TIM_ConfigClockSource+0x7e>
 8004df0:	2b50      	cmp	r3, #80	; 0x50
 8004df2:	d033      	beq.n	8004e5c <HAL_TIM_ConfigClockSource+0xe0>
 8004df4:	2b60      	cmp	r3, #96	; 0x60
 8004df6:	d041      	beq.n	8004e7c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004df8:	e06a      	b.n	8004ed0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dfe:	d066      	beq.n	8004ece <HAL_TIM_ConfigClockSource+0x152>
 8004e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e04:	d017      	beq.n	8004e36 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004e06:	e063      	b.n	8004ed0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6818      	ldr	r0, [r3, #0]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	6899      	ldr	r1, [r3, #8]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f000 fac9 	bl	80053ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e2a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	609a      	str	r2, [r3, #8]
      break;
 8004e34:	e04c      	b.n	8004ed0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6818      	ldr	r0, [r3, #0]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	6899      	ldr	r1, [r3, #8]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	f000 fab2 	bl	80053ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e58:	609a      	str	r2, [r3, #8]
      break;
 8004e5a:	e039      	b.n	8004ed0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	6859      	ldr	r1, [r3, #4]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	f000 fa29 	bl	80052c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2150      	movs	r1, #80	; 0x50
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 fa80 	bl	800537a <TIM_ITRx_SetConfig>
      break;
 8004e7a:	e029      	b.n	8004ed0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6818      	ldr	r0, [r3, #0]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	6859      	ldr	r1, [r3, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	f000 fa47 	bl	800531c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2160      	movs	r1, #96	; 0x60
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 fa70 	bl	800537a <TIM_ITRx_SetConfig>
      break;
 8004e9a:	e019      	b.n	8004ed0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6818      	ldr	r0, [r3, #0]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	6859      	ldr	r1, [r3, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	f000 fa09 	bl	80052c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2140      	movs	r1, #64	; 0x40
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 fa60 	bl	800537a <TIM_ITRx_SetConfig>
      break;
 8004eba:	e009      	b.n	8004ed0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	f000 fa57 	bl	800537a <TIM_ITRx_SetConfig>
        break;
 8004ecc:	e000      	b.n	8004ed0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004ece:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
	...

08004eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a29      	ldr	r2, [pc, #164]	; (8004fa4 <TIM_Base_SetConfig+0xb8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d00b      	beq.n	8004f1c <TIM_Base_SetConfig+0x30>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f0a:	d007      	beq.n	8004f1c <TIM_Base_SetConfig+0x30>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a26      	ldr	r2, [pc, #152]	; (8004fa8 <TIM_Base_SetConfig+0xbc>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d003      	beq.n	8004f1c <TIM_Base_SetConfig+0x30>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a25      	ldr	r2, [pc, #148]	; (8004fac <TIM_Base_SetConfig+0xc0>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d108      	bne.n	8004f2e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a1c      	ldr	r2, [pc, #112]	; (8004fa4 <TIM_Base_SetConfig+0xb8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d00b      	beq.n	8004f4e <TIM_Base_SetConfig+0x62>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f3c:	d007      	beq.n	8004f4e <TIM_Base_SetConfig+0x62>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a19      	ldr	r2, [pc, #100]	; (8004fa8 <TIM_Base_SetConfig+0xbc>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d003      	beq.n	8004f4e <TIM_Base_SetConfig+0x62>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a18      	ldr	r2, [pc, #96]	; (8004fac <TIM_Base_SetConfig+0xc0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d108      	bne.n	8004f60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a07      	ldr	r2, [pc, #28]	; (8004fa4 <TIM_Base_SetConfig+0xb8>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d103      	bne.n	8004f94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	615a      	str	r2, [r3, #20]
}
 8004f9a:	bf00      	nop
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr
 8004fa4:	40012c00 	.word	0x40012c00
 8004fa8:	40000400 	.word	0x40000400
 8004fac:	40000800 	.word	0x40000800

08004fb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	f023 0201 	bic.w	r2, r3, #1
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f023 0303 	bic.w	r3, r3, #3
 8004fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f023 0302 	bic.w	r3, r3, #2
 8004ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a1c      	ldr	r2, [pc, #112]	; (8005078 <TIM_OC1_SetConfig+0xc8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d10c      	bne.n	8005026 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f023 0308 	bic.w	r3, r3, #8
 8005012:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	4313      	orrs	r3, r2
 800501c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f023 0304 	bic.w	r3, r3, #4
 8005024:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a13      	ldr	r2, [pc, #76]	; (8005078 <TIM_OC1_SetConfig+0xc8>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d111      	bne.n	8005052 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800503c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4313      	orrs	r3, r2
 8005050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	621a      	str	r2, [r3, #32]
}
 800506c:	bf00      	nop
 800506e:	371c      	adds	r7, #28
 8005070:	46bd      	mov	sp, r7
 8005072:	bc80      	pop	{r7}
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	40012c00 	.word	0x40012c00

0800507c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	f023 0210 	bic.w	r2, r3, #16
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	021b      	lsls	r3, r3, #8
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f023 0320 	bic.w	r3, r3, #32
 80050c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a1d      	ldr	r2, [pc, #116]	; (800514c <TIM_OC2_SetConfig+0xd0>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d10d      	bne.n	80050f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	011b      	lsls	r3, r3, #4
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a14      	ldr	r2, [pc, #80]	; (800514c <TIM_OC2_SetConfig+0xd0>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d113      	bne.n	8005128 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005106:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800510e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	4313      	orrs	r3, r2
 800511a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	4313      	orrs	r3, r2
 8005126:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	621a      	str	r2, [r3, #32]
}
 8005142:	bf00      	nop
 8005144:	371c      	adds	r7, #28
 8005146:	46bd      	mov	sp, r7
 8005148:	bc80      	pop	{r7}
 800514a:	4770      	bx	lr
 800514c:	40012c00 	.word	0x40012c00

08005150 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 0303 	bic.w	r3, r3, #3
 8005186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	021b      	lsls	r3, r3, #8
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a1d      	ldr	r2, [pc, #116]	; (8005220 <TIM_OC3_SetConfig+0xd0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d10d      	bne.n	80051ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	021b      	lsls	r3, r3, #8
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	4313      	orrs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a14      	ldr	r2, [pc, #80]	; (8005220 <TIM_OC3_SetConfig+0xd0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d113      	bne.n	80051fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	621a      	str	r2, [r3, #32]
}
 8005214:	bf00      	nop
 8005216:	371c      	adds	r7, #28
 8005218:	46bd      	mov	sp, r7
 800521a:	bc80      	pop	{r7}
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	40012c00 	.word	0x40012c00

08005224 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800525a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	021b      	lsls	r3, r3, #8
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	4313      	orrs	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800526e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	031b      	lsls	r3, r3, #12
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	4313      	orrs	r3, r2
 800527a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a0f      	ldr	r2, [pc, #60]	; (80052bc <TIM_OC4_SetConfig+0x98>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d109      	bne.n	8005298 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800528a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	019b      	lsls	r3, r3, #6
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	4313      	orrs	r3, r2
 8005296:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	621a      	str	r2, [r3, #32]
}
 80052b2:	bf00      	nop
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bc80      	pop	{r7}
 80052ba:	4770      	bx	lr
 80052bc:	40012c00 	.word	0x40012c00

080052c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	f023 0201 	bic.w	r2, r3, #1
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	011b      	lsls	r3, r3, #4
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f023 030a 	bic.w	r3, r3, #10
 80052fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	4313      	orrs	r3, r2
 8005304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	621a      	str	r2, [r3, #32]
}
 8005312:	bf00      	nop
 8005314:	371c      	adds	r7, #28
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr

0800531c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	f023 0210 	bic.w	r2, r3, #16
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005346:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	031b      	lsls	r3, r3, #12
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	4313      	orrs	r3, r2
 8005350:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005358:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	011b      	lsls	r3, r3, #4
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	4313      	orrs	r3, r2
 8005362:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	621a      	str	r2, [r3, #32]
}
 8005370:	bf00      	nop
 8005372:	371c      	adds	r7, #28
 8005374:	46bd      	mov	sp, r7
 8005376:	bc80      	pop	{r7}
 8005378:	4770      	bx	lr

0800537a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800537a:	b480      	push	{r7}
 800537c:	b085      	sub	sp, #20
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005390:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4313      	orrs	r3, r2
 8005398:	f043 0307 	orr.w	r3, r3, #7
 800539c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	609a      	str	r2, [r3, #8]
}
 80053a4:	bf00      	nop
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bc80      	pop	{r7}
 80053ac:	4770      	bx	lr

080053ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b087      	sub	sp, #28
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	607a      	str	r2, [r7, #4]
 80053ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	021a      	lsls	r2, r3, #8
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	431a      	orrs	r2, r3
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	4313      	orrs	r3, r2
 80053da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	609a      	str	r2, [r3, #8]
}
 80053e2:	bf00      	nop
 80053e4:	371c      	adds	r7, #28
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr

080053ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	f003 031f 	and.w	r3, r3, #31
 80053fe:	2201      	movs	r2, #1
 8005400:	fa02 f303 	lsl.w	r3, r2, r3
 8005404:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a1a      	ldr	r2, [r3, #32]
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	43db      	mvns	r3, r3
 800540e:	401a      	ands	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6a1a      	ldr	r2, [r3, #32]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f003 031f 	and.w	r3, r3, #31
 800541e:	6879      	ldr	r1, [r7, #4]
 8005420:	fa01 f303 	lsl.w	r3, r1, r3
 8005424:	431a      	orrs	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	621a      	str	r2, [r3, #32]
}
 800542a:	bf00      	nop
 800542c:	371c      	adds	r7, #28
 800542e:	46bd      	mov	sp, r7
 8005430:	bc80      	pop	{r7}
 8005432:	4770      	bx	lr

08005434 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005444:	2b01      	cmp	r3, #1
 8005446:	d101      	bne.n	800544c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005448:	2302      	movs	r3, #2
 800544a:	e046      	b.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005472:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a16      	ldr	r2, [pc, #88]	; (80054e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00e      	beq.n	80054ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005498:	d009      	beq.n	80054ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a12      	ldr	r2, [pc, #72]	; (80054e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d004      	beq.n	80054ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a10      	ldr	r2, [pc, #64]	; (80054ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d10c      	bne.n	80054c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	4313      	orrs	r3, r2
 80054be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	bc80      	pop	{r7}
 80054e2:	4770      	bx	lr
 80054e4:	40012c00 	.word	0x40012c00
 80054e8:	40000400 	.word	0x40000400
 80054ec:	40000800 	.word	0x40000800

080054f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e03f      	b.n	8005582 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d106      	bne.n	800551c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fc fe80 	bl	800221c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2224      	movs	r2, #36	; 0x24
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005532:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f829 	bl	800558c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	691a      	ldr	r2, [r3, #16]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005548:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695a      	ldr	r2, [r3, #20]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005558:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005568:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2220      	movs	r2, #32
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2220      	movs	r2, #32
 800557c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689a      	ldr	r2, [r3, #8]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	431a      	orrs	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80055c6:	f023 030c 	bic.w	r3, r3, #12
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	6812      	ldr	r2, [r2, #0]
 80055ce:	68b9      	ldr	r1, [r7, #8]
 80055d0:	430b      	orrs	r3, r1
 80055d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	699a      	ldr	r2, [r3, #24]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a2c      	ldr	r2, [pc, #176]	; (80056a0 <UART_SetConfig+0x114>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d103      	bne.n	80055fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80055f4:	f7fe fa96 	bl	8003b24 <HAL_RCC_GetPCLK2Freq>
 80055f8:	60f8      	str	r0, [r7, #12]
 80055fa:	e002      	b.n	8005602 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80055fc:	f7fe fa7e 	bl	8003afc <HAL_RCC_GetPCLK1Freq>
 8005600:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	4613      	mov	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4413      	add	r3, r2
 800560a:	009a      	lsls	r2, r3, #2
 800560c:	441a      	add	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	fbb2 f3f3 	udiv	r3, r2, r3
 8005618:	4a22      	ldr	r2, [pc, #136]	; (80056a4 <UART_SetConfig+0x118>)
 800561a:	fba2 2303 	umull	r2, r3, r2, r3
 800561e:	095b      	lsrs	r3, r3, #5
 8005620:	0119      	lsls	r1, r3, #4
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4613      	mov	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	009a      	lsls	r2, r3, #2
 800562c:	441a      	add	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	fbb2 f2f3 	udiv	r2, r2, r3
 8005638:	4b1a      	ldr	r3, [pc, #104]	; (80056a4 <UART_SetConfig+0x118>)
 800563a:	fba3 0302 	umull	r0, r3, r3, r2
 800563e:	095b      	lsrs	r3, r3, #5
 8005640:	2064      	movs	r0, #100	; 0x64
 8005642:	fb00 f303 	mul.w	r3, r0, r3
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	011b      	lsls	r3, r3, #4
 800564a:	3332      	adds	r3, #50	; 0x32
 800564c:	4a15      	ldr	r2, [pc, #84]	; (80056a4 <UART_SetConfig+0x118>)
 800564e:	fba2 2303 	umull	r2, r3, r2, r3
 8005652:	095b      	lsrs	r3, r3, #5
 8005654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005658:	4419      	add	r1, r3
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	4613      	mov	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	009a      	lsls	r2, r3, #2
 8005664:	441a      	add	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005670:	4b0c      	ldr	r3, [pc, #48]	; (80056a4 <UART_SetConfig+0x118>)
 8005672:	fba3 0302 	umull	r0, r3, r3, r2
 8005676:	095b      	lsrs	r3, r3, #5
 8005678:	2064      	movs	r0, #100	; 0x64
 800567a:	fb00 f303 	mul.w	r3, r0, r3
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	011b      	lsls	r3, r3, #4
 8005682:	3332      	adds	r3, #50	; 0x32
 8005684:	4a07      	ldr	r2, [pc, #28]	; (80056a4 <UART_SetConfig+0x118>)
 8005686:	fba2 2303 	umull	r2, r3, r2, r3
 800568a:	095b      	lsrs	r3, r3, #5
 800568c:	f003 020f 	and.w	r2, r3, #15
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	440a      	add	r2, r1
 8005696:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005698:	bf00      	nop
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	40013800 	.word	0x40013800
 80056a4:	51eb851f 	.word	0x51eb851f

080056a8 <__libc_init_array>:
 80056a8:	b570      	push	{r4, r5, r6, lr}
 80056aa:	2500      	movs	r5, #0
 80056ac:	4e0c      	ldr	r6, [pc, #48]	; (80056e0 <__libc_init_array+0x38>)
 80056ae:	4c0d      	ldr	r4, [pc, #52]	; (80056e4 <__libc_init_array+0x3c>)
 80056b0:	1ba4      	subs	r4, r4, r6
 80056b2:	10a4      	asrs	r4, r4, #2
 80056b4:	42a5      	cmp	r5, r4
 80056b6:	d109      	bne.n	80056cc <__libc_init_array+0x24>
 80056b8:	f000 f822 	bl	8005700 <_init>
 80056bc:	2500      	movs	r5, #0
 80056be:	4e0a      	ldr	r6, [pc, #40]	; (80056e8 <__libc_init_array+0x40>)
 80056c0:	4c0a      	ldr	r4, [pc, #40]	; (80056ec <__libc_init_array+0x44>)
 80056c2:	1ba4      	subs	r4, r4, r6
 80056c4:	10a4      	asrs	r4, r4, #2
 80056c6:	42a5      	cmp	r5, r4
 80056c8:	d105      	bne.n	80056d6 <__libc_init_array+0x2e>
 80056ca:	bd70      	pop	{r4, r5, r6, pc}
 80056cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056d0:	4798      	blx	r3
 80056d2:	3501      	adds	r5, #1
 80056d4:	e7ee      	b.n	80056b4 <__libc_init_array+0xc>
 80056d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056da:	4798      	blx	r3
 80056dc:	3501      	adds	r5, #1
 80056de:	e7f2      	b.n	80056c6 <__libc_init_array+0x1e>
 80056e0:	08005758 	.word	0x08005758
 80056e4:	08005758 	.word	0x08005758
 80056e8:	08005758 	.word	0x08005758
 80056ec:	0800575c 	.word	0x0800575c

080056f0 <memset>:
 80056f0:	4603      	mov	r3, r0
 80056f2:	4402      	add	r2, r0
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d100      	bne.n	80056fa <memset+0xa>
 80056f8:	4770      	bx	lr
 80056fa:	f803 1b01 	strb.w	r1, [r3], #1
 80056fe:	e7f9      	b.n	80056f4 <memset+0x4>

08005700 <_init>:
 8005700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005702:	bf00      	nop
 8005704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005706:	bc08      	pop	{r3}
 8005708:	469e      	mov	lr, r3
 800570a:	4770      	bx	lr

0800570c <_fini>:
 800570c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570e:	bf00      	nop
 8005710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005712:	bc08      	pop	{r3}
 8005714:	469e      	mov	lr, r3
 8005716:	4770      	bx	lr
